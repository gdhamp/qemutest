Core/Include/core_cm33.h:    __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
Core/Include/core_cm7.h:    __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
Core/Include/cmsis_iccarm.h:__IAR_FT uint16_t __iar_uint16_read(void const *ptr)
Core/Include/cmsis_iccarm.h:  return *(__packed uint16_t*)(ptr);
Core/Include/cmsis_iccarm.h:__IAR_FT void __iar_uint16_write(void const *ptr, uint16_t val)
Core/Include/cmsis_iccarm.h:  *(__packed uint16_t*)(ptr) = val;;
Core/Include/cmsis_iccarm.h:  __IAR_FT int16_t __REVSH(int16_t val)
Core/Include/cmsis_iccarm.h:    return (int16_t) __iar_builtin_REVSH(val);
Core/Include/cmsis_iccarm.h:  __IAR_FT uint16_t __LDRHT(volatile uint16_t *addr)
Core/Include/cmsis_iccarm.h:    return ((uint16_t)res);
Core/Include/cmsis_iccarm.h:  __IAR_FT void __STRHT(uint16_t value, volatile uint16_t *addr)
Core/Include/cmsis_iccarm.h:  __IAR_FT uint16_t __LDAH(volatile uint16_t *ptr)
Core/Include/cmsis_iccarm.h:    return ((uint16_t)res);
Core/Include/cmsis_iccarm.h:  __IAR_FT void __STLH(uint16_t value, volatile uint16_t *ptr)
Core/Include/cmsis_iccarm.h:  __IAR_FT uint16_t __LDAEXH(volatile uint16_t *ptr)
Core/Include/cmsis_iccarm.h:    return ((uint16_t)res);
Core/Include/cmsis_iccarm.h:  __IAR_FT uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
Core/Include/cmsis_armclang.h:  __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
Core/Include/cmsis_armclang.h:  __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
Core/Include/cmsis_armclang.h:#define __REVSH(value) (int16_t)__builtin_bswap16(value)
Core/Include/cmsis_armclang.h:  \return        value of type uint16_t at (*ptr)
Core/Include/cmsis_armclang.h:#define __LDREXH        (uint16_t)__builtin_arm_ldrex
Core/Include/cmsis_armclang.h:  \return        value of type uint16_t at (*ptr)
Core/Include/cmsis_armclang.h:__STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
Core/Include/cmsis_armclang.h:  return ((uint16_t) result);    /* Add explicit type cast here */
Core/Include/cmsis_armclang.h:__STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
Core/Include/cmsis_armclang.h:  \return        value of type uint16_t at (*ptr)
Core/Include/cmsis_armclang.h:__STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
Core/Include/cmsis_armclang.h:  return ((uint16_t) result);
Core/Include/cmsis_armclang.h:__STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
Core/Include/cmsis_armclang.h:  \return        value of type uint16_t at (*ptr)
Core/Include/cmsis_armclang.h:#define     __LDAEXH                 (uint16_t)__builtin_arm_ldaex
Core/Include/core_sc300.h:    __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
Core/Include/cmsis_compiler.h:    __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
Core/Include/cmsis_compiler.h:    __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
Core/Include/cmsis_compiler.h:    __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
Core/Include/cmsis_compiler.h:    __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
Core/Include/cmsis_compiler.h:    __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
Core/Include/cmsis_compiler.h:    __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
Core/Include/core_cm3.h:    __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
Core/Include/core_cm4.h:    __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
Core/Include/core_armv8mml.h:    __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
Core/Include/cmsis_gcc.h:  __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
Core/Include/cmsis_gcc.h:  __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
Core/Include/cmsis_gcc.h:__STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
Core/Include/cmsis_gcc.h:  return (int16_t)__builtin_bswap16(value);
Core/Include/cmsis_gcc.h:  int16_t result;
Core/Include/cmsis_gcc.h:  \return        value of type uint16_t at (*ptr)
Core/Include/cmsis_gcc.h:__STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
Core/Include/cmsis_gcc.h:   return ((uint16_t) result);    /* Add explicit type cast here */
Core/Include/cmsis_gcc.h:__STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
Core/Include/cmsis_gcc.h:  \return        value of type uint16_t at (*ptr)
Core/Include/cmsis_gcc.h:__STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
Core/Include/cmsis_gcc.h:   return ((uint16_t) result);    /* Add explicit type cast here */
Core/Include/cmsis_gcc.h:__STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
Core/Include/cmsis_gcc.h:  \return        value of type uint16_t at (*ptr)
Core/Include/cmsis_gcc.h:__STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
Core/Include/cmsis_gcc.h:   return ((uint16_t) result);
Core/Include/cmsis_gcc.h:__STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
Core/Include/cmsis_gcc.h:  \return        value of type uint16_t at (*ptr)
Core/Include/cmsis_gcc.h:__STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
Core/Include/cmsis_gcc.h:   return ((uint16_t) result);
Core/Include/cmsis_gcc.h:__STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
Core/Include/cmsis_armcc.h:  #define __UNALIGNED_UINT16_WRITE(addr, val)    ((*((__packed uint16_t *)(addr))) = (val))
Core/Include/cmsis_armcc.h:  #define __UNALIGNED_UINT16_READ(addr)          (*((const __packed uint16_t *)(addr)))
Core/Include/cmsis_armcc.h:__attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int16_t __REVSH(int16_t value)
Core/Include/cmsis_armcc.h:  \return        value of type uint16_t at (*ptr)
Core/Include/cmsis_armcc.h:  #define __LDREXH(ptr)                                                        ((uint16_t) __ldrex(ptr))
Core/Include/cmsis_armcc.h:  #define __LDREXH(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint16_t) __ldrex(ptr))  _Pragma("pop")
Core/Include/cmsis_armcc.h:  \return        value of type uint16_t at (*ptr)
Core/Include/cmsis_armcc.h:#define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
Core_A/Include/cmsis_iccarm.h:  __IAR_FT uint16_t __iar_uint16_read(void const *ptr)
Core_A/Include/cmsis_iccarm.h:    return *(__packed uint16_t*)(ptr);
Core_A/Include/cmsis_iccarm.h:  __IAR_FT void __iar_uint16_write(void const *ptr, uint16_t val)
Core_A/Include/cmsis_iccarm.h:    *(__packed uint16_t*)(ptr) = val;;
Core_A/Include/cmsis_iccarm.h:  __IAR_FT int16_t __REVSH(int16_t val)
Core_A/Include/cmsis_iccarm.h:    return (int16_t) __iar_builtin_REVSH(val);
Core_A/Include/cmsis_armclang.h:  __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
Core_A/Include/cmsis_armclang.h:  __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
Core_A/Include/cmsis_armclang.h:#define __REVSH(value) (int16_t)__builtin_bswap16(value)
Core_A/Include/cmsis_armclang.h:  \return        value of type uint16_t at (*ptr)
Core_A/Include/cmsis_armclang.h:#define __LDREXH        (uint16_t)__builtin_arm_ldrex
Core_A/Include/cmsis_gcc.h:  __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
Core_A/Include/cmsis_gcc.h:  __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
Core_A/Include/cmsis_gcc.h:__STATIC_FORCEINLINE  int16_t __REVSH(int16_t value)
Core_A/Include/cmsis_gcc.h:  return (int16_t)__builtin_bswap16(value);
Core_A/Include/cmsis_gcc.h:  int16_t result;
Core_A/Include/cmsis_gcc.h:  \return        value of type uint16_t at (*ptr)
Core_A/Include/cmsis_gcc.h:__STATIC_FORCEINLINE  uint16_t __LDREXH(volatile uint16_t *addr)
Core_A/Include/cmsis_gcc.h:   return ((uint16_t) result);    /* Add explicit type cast here */
Core_A/Include/cmsis_gcc.h:__STATIC_FORCEINLINE  uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
Core_A/Include/cmsis_armcc.h:  #define __UNALIGNED_UINT16_WRITE(addr, val)    ((*((__packed uint16_t *)(addr))) = (val))
Core_A/Include/cmsis_armcc.h:  #define __UNALIGNED_UINT16_READ(addr)          (*((const __packed uint16_t *)(addr)))
Core_A/Include/cmsis_armcc.h:__attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int16_t __REVSH(int16_t value)
Core_A/Include/cmsis_armcc.h:  \return        value of type uint16_t at (*ptr)
Core_A/Include/cmsis_armcc.h:  #define __LDREXH(ptr)                                                        ((uint16_t) __ldrex(ptr))
Core_A/Include/cmsis_armcc.h:  #define __LDREXH(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint16_t) __ldrex(ptr))  _Pragma("pop")
CoreValidation/Source/CV_CoreInstr.c:  int16_t result = __REVSH(0x4711);
CoreValidation/Source/CV_CoreInstr.c:  result = __REVSH((int16_t)0x8000);
CoreValidation/Source/CV_CoreInstr.c:  ASSERT_TRUE(result == (int16_t)0x8000);
DAP/Firmware/Include/DAP.h:    uint16_t  retry_count;                      // Number of retries after WAIT response
DAP/Firmware/Include/DAP.h:    uint16_t  match_retry;                      // Number of retries if read value does not match
DAP/Firmware/Include/DAP.h:    uint16_t  ir_before[DAP_JTAG_DEV_CNT];      // Bits before IR
DAP/Firmware/Include/DAP.h:    uint16_t  ir_after [DAP_JTAG_DEV_CNT];      // Bits after IR
DAP/Firmware/Template/MDK5/USBD_User_CustomClass_0.c:static volatile uint16_t USB_RequestIndexI;     // Request  Index In
DAP/Firmware/Template/MDK5/USBD_User_CustomClass_0.c:static volatile uint16_t USB_RequestIndexO;     // Request  Index Out
DAP/Firmware/Template/MDK5/USBD_User_CustomClass_0.c:static volatile uint16_t USB_RequestCountI;     // Request  Count In
DAP/Firmware/Template/MDK5/USBD_User_CustomClass_0.c:static volatile uint16_t USB_RequestCountO;     // Request  Count Out
DAP/Firmware/Template/MDK5/USBD_User_CustomClass_0.c:static volatile uint16_t USB_ResponseIndexI;    // Response Index In
DAP/Firmware/Template/MDK5/USBD_User_CustomClass_0.c:static volatile uint16_t USB_ResponseIndexO;    // Response Index Out
DAP/Firmware/Template/MDK5/USBD_User_CustomClass_0.c:static volatile uint16_t USB_ResponseCountI;    // Response Count In
DAP/Firmware/Template/MDK5/USBD_User_CustomClass_0.c:static volatile uint16_t USB_ResponseCountO;    // Response Count Out
DAP/Firmware/Template/MDK5/USBD_User_CustomClass_0.c:static uint16_t USB_RespSize[DAP_PACKET_COUNT];                                                           // Response Size
DAP/Firmware/Template/MDK5/USBD_User_CustomClass_0.c:    if ((uint16_t)(USB_RequestCountI - USB_RequestCountO) != DAP_PACKET_COUNT) {
DAP/Firmware/Template/MDK5/USBD_User_CustomClass_0.c:        (uint16_t)DAP_ExecuteCommand(USB_Request[USB_RequestIndexO], USB_Response[USB_ResponseIndexI]);
DAP/Firmware/Template/MDK5/USBD_User_CustomClass_0.c:        if ((uint16_t)(USB_RequestCountI - USB_RequestCountO) != DAP_PACKET_COUNT) {
DAP/Firmware/Template/MDK5/USBD_User_HID_0.c:static volatile uint16_t USB_RequestIndexI;     // Request  Index In
DAP/Firmware/Template/MDK5/USBD_User_HID_0.c:static volatile uint16_t USB_RequestIndexO;     // Request  Index Out
DAP/Firmware/Template/MDK5/USBD_User_HID_0.c:static volatile uint16_t USB_RequestCountI;     // Request  Count In
DAP/Firmware/Template/MDK5/USBD_User_HID_0.c:static volatile uint16_t USB_RequestCountO;     // Request  Count Out
DAP/Firmware/Template/MDK5/USBD_User_HID_0.c:static volatile uint16_t USB_ResponseIndexI;    // Response Index In
DAP/Firmware/Template/MDK5/USBD_User_HID_0.c:static volatile uint16_t USB_ResponseIndexO;    // Response Index Out
DAP/Firmware/Template/MDK5/USBD_User_HID_0.c:static volatile uint16_t USB_ResponseCountI;    // Response Count In
DAP/Firmware/Template/MDK5/USBD_User_HID_0.c:static volatile uint16_t USB_ResponseCountO;    // Response Count Out
DAP/Firmware/Template/MDK5/USBD_User_HID_0.c:      if ((uint16_t)(USB_RequestCountI - USB_RequestCountO) == DAP_PACKET_COUNT) {
DAP/Firmware/Source/DAP.c:    DAP_Data.jtag_dev.ir_before[n] = (uint16_t)bits;
DAP/Firmware/Source/DAP.c:    DAP_Data.jtag_dev.ir_after[n] = (uint16_t)bits;
DAP/Firmware/Source/DAP.c:  DAP_Data.transfer.retry_count = (uint16_t) *(request+1) |
DAP/Firmware/Source/DAP.c:                                  (uint16_t)(*(request+2) << 8);
DAP/Firmware/Source/DAP.c:  DAP_Data.transfer.match_retry = (uint16_t) *(request+3) | 
DAP/Firmware/Source/DAP.c:                                  (uint16_t)(*(request+4) << 8);
DAP/Firmware/Source/DAP.c:      request  += (uint16_t)(n >> 16);
DAP/Firmware/Source/DAP.c:      response += (uint16_t) n;  
DAP/Firmware/Examples/LPC-Link-II/V1/USBD_User_HID_0.c:static volatile uint16_t USB_RequestIndexI;     // Request  Index In
DAP/Firmware/Examples/LPC-Link-II/V1/USBD_User_HID_0.c:static volatile uint16_t USB_RequestIndexO;     // Request  Index Out
DAP/Firmware/Examples/LPC-Link-II/V1/USBD_User_HID_0.c:static volatile uint16_t USB_RequestCountI;     // Request  Count In
DAP/Firmware/Examples/LPC-Link-II/V1/USBD_User_HID_0.c:static volatile uint16_t USB_RequestCountO;     // Request  Count Out
DAP/Firmware/Examples/LPC-Link-II/V1/USBD_User_HID_0.c:static volatile uint16_t USB_ResponseIndexI;    // Response Index In
DAP/Firmware/Examples/LPC-Link-II/V1/USBD_User_HID_0.c:static volatile uint16_t USB_ResponseIndexO;    // Response Index Out
DAP/Firmware/Examples/LPC-Link-II/V1/USBD_User_HID_0.c:static volatile uint16_t USB_ResponseCountI;    // Response Count In
DAP/Firmware/Examples/LPC-Link-II/V1/USBD_User_HID_0.c:static volatile uint16_t USB_ResponseCountO;    // Response Count Out
DAP/Firmware/Examples/LPC-Link-II/V1/USBD_User_HID_0.c:      if ((uint16_t)(USB_RequestCountI - USB_RequestCountO) == DAP_PACKET_COUNT) {
Binary file DAP/Firmware/Examples/LPC-Link-II/V1/Objects/CMSIS_DAP.axf matches
DAP/Firmware/Examples/LPC-Link-II/V1/RTE/Device/LPC4320_Cortex-M4/system_LPC43xx.c:const uint16_t emcdivby2_opc[] =  {
DAP/Firmware/Examples/LPC-Link-II/V2/USBD_User_CustomClass_0.c:static volatile uint16_t USB_RequestIndexI;     // Request  Index In
DAP/Firmware/Examples/LPC-Link-II/V2/USBD_User_CustomClass_0.c:static volatile uint16_t USB_RequestIndexO;     // Request  Index Out
DAP/Firmware/Examples/LPC-Link-II/V2/USBD_User_CustomClass_0.c:static volatile uint16_t USB_RequestCountI;     // Request  Count In
DAP/Firmware/Examples/LPC-Link-II/V2/USBD_User_CustomClass_0.c:static volatile uint16_t USB_RequestCountO;     // Request  Count Out
DAP/Firmware/Examples/LPC-Link-II/V2/USBD_User_CustomClass_0.c:static volatile uint16_t USB_ResponseIndexI;    // Response Index In
DAP/Firmware/Examples/LPC-Link-II/V2/USBD_User_CustomClass_0.c:static volatile uint16_t USB_ResponseIndexO;    // Response Index Out
DAP/Firmware/Examples/LPC-Link-II/V2/USBD_User_CustomClass_0.c:static volatile uint16_t USB_ResponseCountI;    // Response Count In
DAP/Firmware/Examples/LPC-Link-II/V2/USBD_User_CustomClass_0.c:static volatile uint16_t USB_ResponseCountO;    // Response Count Out
DAP/Firmware/Examples/LPC-Link-II/V2/USBD_User_CustomClass_0.c:static uint16_t USB_RespSize[DAP_PACKET_COUNT];                                                           // Response Size
DAP/Firmware/Examples/LPC-Link-II/V2/USBD_User_CustomClass_0.c:    if ((uint16_t)(USB_RequestCountI - USB_RequestCountO) != DAP_PACKET_COUNT) {
DAP/Firmware/Examples/LPC-Link-II/V2/USBD_User_CustomClass_0.c:        (uint16_t)DAP_ExecuteCommand(USB_Request[USB_RequestIndexO], USB_Response[USB_ResponseIndexI]);
DAP/Firmware/Examples/LPC-Link-II/V2/USBD_User_CustomClass_0.c:        if ((uint16_t)(USB_RequestCountI - USB_RequestCountO) != DAP_PACKET_COUNT) {
Binary file DAP/Firmware/Examples/LPC-Link-II/V2/Objects/CMSIS_DAP.axf matches
DAP/Firmware/Examples/LPC-Link-II/V2/RTE/Device/LPC4320_Cortex-M4/system_LPC43xx.c:const uint16_t emcdivby2_opc[] =  {
DoxyGen/How2Doc.txt:extern int USBH_HID_Write (uint8_t index, uint8_t *ptr_data, uint16_t data_len);
DoxyGen/Driver/src/Driver_ETH_MAC.c:int32_t ARM_ETH_MAC_PHY_Read (uint8_t phy_addr, uint8_t reg_addr, uint16_t *data)  {
DoxyGen/Driver/src/Driver_ETH_MAC.c:\fn int32_t ARM_ETH_MAC_PHY_Read (uint8_t phy_addr, uint8_t reg_addr, uint16_t *data)
DoxyGen/Driver/src/Driver_ETH_MAC.c:int32_t ARM_ETH_MAC_PHY_Write (uint8_t phy_addr, uint8_t reg_addr, uint16_t data)  {
DoxyGen/Driver/src/Driver_ETH_MAC.c:\fn int32_t ARM_ETH_MAC_PHY_Write (uint8_t phy_addr, uint8_t reg_addr, uint16_t data)
DoxyGen/Driver/src/Driver_Flash.c:The element \em data_width specifies the data access size and also defines the data type (uint8_t, uint16_t or uint32_t) for the \em data parameter in \ref ARM_Flash_ReadData and \ref ARM_Flash_ProgramData functions.
DoxyGen/Driver/src/Driver_Flash.c:The data type is \em uint8_t, \em uint16_t or \em uint32_t and is specified by the \em data_width in \ref ARM_FLASH_CAPABILITIES. \n
DoxyGen/Driver/src/Driver_Flash.c:The data type is \em uint8_t, \em uint16_t or \em uint32_t and is specified by the \em data_width in \ref ARM_FLASH_CAPABILITIES. \n
DoxyGen/Driver/src/Driver_USBD.c:                                    uint16_t ep_max_packet_size)  {
DoxyGen/Driver/src/Driver_USBD.c:\fn int32_t ARM_USBD_EndpointConfigure (uint8_t ep_addr, uint8_t ep_type, uint16_t ep_max_packet_size)
DoxyGen/Driver/src/Driver_USBD.c:uint16_t ARM_USBD_GetFrameNumber (void)  {
DoxyGen/Driver/src/Driver_USBD.c:\fn uint16_t ARM_USBD_GetFrameNumber (void)
DoxyGen/Driver/src/Driver_USART.c: - \em uint16_t when configured for 9 data bits
DoxyGen/Driver/src/Driver_USART.c: - \em uint16_t when configured for 9 data bits
DoxyGen/Driver/src/Driver_USART.c: - \em uint16_t when configured for 9 data bits
DoxyGen/Driver/src/Driver_NAND.c: - \em uint16_t for 16-bit data bus
DoxyGen/Driver/src/Driver_NAND.c: - \em uint16_t for 16-bit data bus
DoxyGen/Driver/src/Driver_NAND.c: - \em uint16_t for 16-bit data bus
DoxyGen/Driver/src/Driver_Common.c:The version is encoded as 16-bit unsigned value (uint16_t) with:
DoxyGen/Driver/src/Driver_SAI.c: - \em uint16_t when configured for \token{9..16} data bits
DoxyGen/Driver/src/Driver_SAI.c: - \em uint16_t when configured for \token{9..16} data bits
DoxyGen/Driver/src/I2C_Demo.c:int32_t EEPROM_WriteBuf (uint16_t addr, const uint8_t *buf, uint32_t len) {
DoxyGen/Driver/src/I2C_Demo.c:int32_t EEPROM_ReadBuf (uint16_t addr, uint8_t *buf, uint32_t len) {
DoxyGen/Driver/src/Driver_SPI.c: - \em uint16_t when configured for 9..16 data bits
DoxyGen/Driver/src/Driver_SPI.c: - \em uint16_t when configured for 9..16 data bits
DoxyGen/Driver/src/Driver_SPI.c: - \em uint16_t when configured for 9..16 data bits
DoxyGen/Driver/src/Driver_USBH.c:                                          uint16_t ep_max_packet_size,
DoxyGen/Driver/src/Driver_USBH.c:\fn ARM_USBH_PIPE_HANDLE ARM_USBH_PipeCreate (uint8_t dev_addr, uint8_t dev_speed, uint8_t hub_addr, uint8_t hub_port, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_max_packet_size, uint8_t ep_interval)
DoxyGen/Driver/src/Driver_USBH.c:                             uint16_t             ep_max_packet_size)  {
DoxyGen/Driver/src/Driver_USBH.c:\fn int32_t ARM_USBH_PipeModify (ARM_USBH_PIPE_HANDLE pipe_hndl, uint8_t dev_addr, uint8_t dev_speed, uint8_t hub_addr, uint8_t hub_port, uint16_t ep_max_packet_size)
DoxyGen/Driver/src/Driver_USBH.c:uint16_t ARM_USBH_GetFrameNumber (void)  {
DoxyGen/Driver/src/Driver_USBH.c:\fn uint16_t ARM_USBH_GetFrameNumber (void)
DoxyGen/Core/src/Ref_CompilerControl.txt:  uint16_t  u16;
DoxyGen/Core/src/Ref_CompilerControl.txt:\brief Pointer for unaligned read of a uint16_t variable.
DoxyGen/Core/src/Ref_CompilerControl.txt:Defines a pointer to a uint16_t from an address that does not need to be aligned. This can then be used in read
DoxyGen/Core/src/Ref_CompilerControl.txt:uint16_t val16;
DoxyGen/Core/src/Ref_CompilerControl.txt:\brief Pointer for unaligned write of a uint16_t variable.
DoxyGen/Core/src/Ref_CompilerControl.txt:Defines a pointer to a uint16_t from an address that does not need to be aligned. This can then be used in write
DoxyGen/Core/src/Ref_CompilerControl.txt:uint16_t val16 = 0U;
DoxyGen/Core/src/Ref_DataStructs.txt:    __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
DoxyGen/Core/src/Ref_cmInstr.txt:    \return        value of type uint16_t at (*addr)
DoxyGen/Core/src/Ref_cmInstr.txt:uint16_t __LDREXH(volatile uint16_t *addr);
DoxyGen/Core/src/Ref_cmInstr.txt:uint32_t __STREXH(uint16_t value, volatile uint16_t *addr);
DoxyGen/Core/src/Ref_cmInstr.txt:    \return        value of type uint16_t at (*ptr)
DoxyGen/Core/src/Ref_cmInstr.txt:uint16_t  __LDRHT(uint16_t ptr);
DoxyGen/Core/src/Ref_cmInstr.txt:void __STRHT(uint16_t value, uint16_t ptr);
DoxyGen/Core/src/Ref_cmInstr.txt:  \return        value of type uint16_t at (*ptr)
DoxyGen/Core/src/Ref_cmInstr.txt:uint16_t __LDAH(volatile uint16_t *ptr);
DoxyGen/Core/src/Ref_cmInstr.txt:void __STLH(uint16_t value, volatile uint16_t *ptr);
DoxyGen/Core/src/Ref_cmInstr.txt:  \return        value of type uint16_t at (*ptr)
DoxyGen/Core/src/Ref_cmInstr.txt:uint16_t __LDAEXH(volatile uint32_t *ptr);
DoxyGen/Core/src/Ref_cmInstr.txt:uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr);
DoxyGen/Core_A/src/cmsis_armcc.txt:uint16_t __REV16(uint16_t value);
DoxyGen/SVD/src/ARM_ExampleT0Struct.h:    __IO uint16_t  SR;                              /*!< Status Register                                                       */
DoxyGen/SVD/src/ARM_ExampleT0Struct.h:      __I  uint16_t  RUN        :  1;               /*!< Shows if Timer is running or not                                      */
DoxyGen/SVD/src/ARM_ExampleT0Struct.h:           uint16_t             :  7;
DoxyGen/SVD/src/ARM_ExampleT0Struct.h:      __IO uint16_t  MATCH      :  1;               /*!< Shows if the MATCH was hit                                            */
DoxyGen/SVD/src/ARM_ExampleT0Struct.h:      __IO uint16_t  UN         :  1;               /*!< Shows if an underflow occured. This flag is sticky                    */
DoxyGen/SVD/src/ARM_ExampleT0Struct.h:      __IO uint16_t  OV         :  1;               /*!< Shows if an overflow occured. This flag is sticky                     */
DoxyGen/SVD/src/ARM_ExampleT0Struct.h:           uint16_t             :  1;
DoxyGen/SVD/src/ARM_ExampleT0Struct.h:      __I  uint16_t  RST        :  1;               /*!< Shows if Timer is in RESET state                                      */
DoxyGen/SVD/src/ARM_ExampleT0Struct.h:           uint16_t             :  1;
DoxyGen/SVD/src/ARM_ExampleT0Struct.h:      __I  uint16_t  RELOAD     :  2;               /*!< Shows the currently active RELOAD Register                            */
DoxyGen/SVD/src/ARM_ExampleT0Struct.h:  __I  uint16_t  RESERVED0[5];
DoxyGen/SVD/src/ARM_ExampleT0Struct.h:    __IO uint16_t  INT;                             /*!< Interrupt Register                                                    */
DoxyGen/SVD/src/ARM_ExampleT0Struct.h:      __IO uint16_t  EN         :  1;               /*!< Interrupt Enable                                                      */
DoxyGen/SVD/src/ARM_ExampleT0Struct.h:           uint16_t             :  3;
DoxyGen/SVD/src/ARM_ExampleT0Struct.h:      __IO uint16_t  MODE       :  3;               /*!< Interrupt Mode, selects on which condition the Timer should
DoxyGen/SVD/src/ARM_ExampleT0Struct.h:  __I  uint16_t  RESERVED1[7];
DoxyGen/SVD/src/ARM_ExampleT0.h:  __IO uint16_t  SR;                                /*!< Status Register                                                       */
DoxyGen/SVD/src/ARM_ExampleT0.h:  __I  uint16_t  RESERVED0[5];
DoxyGen/SVD/src/ARM_ExampleT0.h:  __IO uint16_t  INT;                               /*!< Interrupt Register                                                    */
DoxyGen/SVD/src/ARM_ExampleT0.h:  __I  uint16_t  RESERVED1[7];
DoxyGen/SVD/src/svd_schema.txt:        - \token{uint16_t}: unsigned half word
DoxyGen/SVD/src/svd_schema.txt:        - \token{int16_t}: signed half word
DoxyGen/SVD/src/svd_schema.txt:        - \token{uint16_t *}: pointer to unsigned half word
DoxyGen/SVD/src/svd_schema.txt:        - \token{int16_t *}: pointer to signed half word
Driver/Include/Driver_ETH_MAC.h:  \fn          int32_t ARM_ETH_MAC_PHY_Read (uint8_t phy_addr, uint8_t reg_addr, uint16_t *data)
Driver/Include/Driver_ETH_MAC.h:  \fn          int32_t ARM_ETH_MAC_PHY_Write (uint8_t phy_addr, uint8_t reg_addr, uint16_t data)
Driver/Include/Driver_ETH_MAC.h:  int32_t                  (*PHY_Read)        (uint8_t phy_addr, uint8_t reg_addr, uint16_t *data);  ///< Pointer to \ref ARM_ETH_MAC_PHY_Read : Read Ethernet PHY Register through Management Interface.
Driver/Include/Driver_ETH_MAC.h:  int32_t                  (*PHY_Write)       (uint8_t phy_addr, uint8_t reg_addr, uint16_t  data);  ///< Pointer to \ref ARM_ETH_MAC_PHY_Write : Write Ethernet PHY Register through Management Interface.
Driver/Include/Driver_USBH.h:                                                         uint16_t ep_max_packet_size,
Driver/Include/Driver_USBH.h:                                            uint16_t             ep_max_packet_size)
Driver/Include/Driver_USBH.h:  \fn          uint16_t ARM_USBH_GetFrameNumber (void)
Driver/Include/Driver_USBH.h:                                                  uint16_t ep_max_packet_size,
Driver/Include/Driver_USBH.h:                                                  uint16_t ep_max_packet_size);              ///< Pointer to \ref ARM_USBH_PipeModify : Modify Pipe in System.
Driver/Include/Driver_USBH.h:  uint16_t              (*GetFrameNumber)        (void);                                     ///< Pointer to \ref ARM_USBH_GetFrameNumber : Get current USB Frame Number.                    
Driver/Include/Driver_NAND.h:  uint16_t codeword_size     [2];       ///< Number of bytes over which ECC is calculated
Driver/Include/Driver_NAND.h:  uint16_t ecc_size          [2];       ///< ECC size in bytes (rounded up)
Driver/Include/Driver_NAND.h:  uint16_t ecc_offset        [2];       ///< ECC offset in bytes (where ECC starts in Spare)
Driver/Include/Driver_NAND.h:  uint16_t virtual_page_size [2];       ///< Virtual Page size in bytes (Main/Spare)
Driver/Include/Driver_NAND.h:  uint16_t codeword_offset   [2];       ///< Codeword offset in bytes (where ECC protected data starts in Main/Spare)
Driver/Include/Driver_NAND.h:  uint16_t codeword_gap      [2];       ///< Codeword gap in bytes till next protected data
Driver/Include/Driver_NAND.h:  uint16_t ecc_gap           [2];       ///< ECC gap in bytes till next generated ECC
Driver/Include/Driver_USBD.h:                                                   uint16_t ep_max_packet_size)
Driver/Include/Driver_USBD.h:  \fn          uint16_t ARM_USBD_GetFrameNumber (void)
Driver/Include/Driver_USBD.h:                                                      uint16_t ep_max_packet_size);                       ///< Pointer to \ref ARM_USBD_EndpointConfigure : Configure USB Endpoint.
Driver/Include/Driver_USBD.h:  uint16_t              (*GetFrameNumber)            (void);                                              ///< Pointer to \ref ARM_USBD_GetFrameNumber : Get current USB Frame Number.
Driver/Include/Driver_Common.h:  uint16_t api;                         ///< API version
Driver/Include/Driver_Common.h:  uint16_t drv;                         ///< Driver version
Driver/Include/Driver_ETH_PHY.h:typedef int32_t (*ARM_ETH_PHY_Read_t)  (uint8_t phy_addr, uint8_t reg_addr, uint16_t *data); ///< Pointer to \ref ARM_ETH_MAC_PHY_Read : Read Ethernet PHY Register.
Driver/Include/Driver_ETH_PHY.h:typedef int32_t (*ARM_ETH_PHY_Write_t) (uint8_t phy_addr, uint8_t reg_addr, uint16_t  data); ///< Pointer to \ref ARM_ETH_MAC_PHY_Write : Write Ethernet PHY Register.
Driver/DriverTemplates/Driver_ETH_MAC.c:int32_t ARM_ETH_MAC_PHY_Read(uint8_t phy_addr, uint8_t reg_addr, uint16_t *data)
Driver/DriverTemplates/Driver_ETH_MAC.c:int32_t ARM_ETH_MAC_PHY_Write(uint8_t phy_addr, uint8_t reg_addr, uint16_t data)
Driver/DriverTemplates/Driver_USBD.c:                                   uint16_t ep_max_packet_size)
Driver/DriverTemplates/Driver_USBD.c:uint16_t ARM_USBD_GetFrameNumber(void)
Driver/DriverTemplates/Driver_USBH.c:                                           uint16_t ep_max_packet_size,
Driver/DriverTemplates/Driver_USBH.c:                                uint16_t ep_max_packet_size)
Driver/DriverTemplates/Driver_USBH.c:uint16_t ARM_USBH_GetFrameNumber(void)
DSP/Include/arm_common_tables.h:extern const uint16_t armBitRevTable[1024];
DSP/Include/arm_common_tables.h:#define ARMBITREVINDEXTABLE_16_TABLE_LENGTH ((uint16_t)20)
DSP/Include/arm_common_tables.h:#define ARMBITREVINDEXTABLE_32_TABLE_LENGTH ((uint16_t)48)
DSP/Include/arm_common_tables.h:#define ARMBITREVINDEXTABLE_64_TABLE_LENGTH ((uint16_t)56)
DSP/Include/arm_common_tables.h:#define ARMBITREVINDEXTABLE_128_TABLE_LENGTH ((uint16_t)208)
DSP/Include/arm_common_tables.h:#define ARMBITREVINDEXTABLE_256_TABLE_LENGTH ((uint16_t)440)
DSP/Include/arm_common_tables.h:#define ARMBITREVINDEXTABLE_512_TABLE_LENGTH ((uint16_t)448)
DSP/Include/arm_common_tables.h:#define ARMBITREVINDEXTABLE_1024_TABLE_LENGTH ((uint16_t)1800)
DSP/Include/arm_common_tables.h:#define ARMBITREVINDEXTABLE_2048_TABLE_LENGTH ((uint16_t)3808)
DSP/Include/arm_common_tables.h:#define ARMBITREVINDEXTABLE_4096_TABLE_LENGTH ((uint16_t)4032)
DSP/Include/arm_common_tables.h:extern const uint16_t armBitRevIndexTable16[ARMBITREVINDEXTABLE_16_TABLE_LENGTH];
DSP/Include/arm_common_tables.h:extern const uint16_t armBitRevIndexTable32[ARMBITREVINDEXTABLE_32_TABLE_LENGTH];
DSP/Include/arm_common_tables.h:extern const uint16_t armBitRevIndexTable64[ARMBITREVINDEXTABLE_64_TABLE_LENGTH];
DSP/Include/arm_common_tables.h:extern const uint16_t armBitRevIndexTable128[ARMBITREVINDEXTABLE_128_TABLE_LENGTH];
DSP/Include/arm_common_tables.h:extern const uint16_t armBitRevIndexTable256[ARMBITREVINDEXTABLE_256_TABLE_LENGTH];
DSP/Include/arm_common_tables.h:extern const uint16_t armBitRevIndexTable512[ARMBITREVINDEXTABLE_512_TABLE_LENGTH];
DSP/Include/arm_common_tables.h:extern const uint16_t armBitRevIndexTable1024[ARMBITREVINDEXTABLE_1024_TABLE_LENGTH];
DSP/Include/arm_common_tables.h:extern const uint16_t armBitRevIndexTable2048[ARMBITREVINDEXTABLE_2048_TABLE_LENGTH];
DSP/Include/arm_common_tables.h:extern const uint16_t armBitRevIndexTable4096[ARMBITREVINDEXTABLE_4096_TABLE_LENGTH];
DSP/Include/arm_common_tables.h:#define ARMBITREVINDEXTABLE_FIXED_16_TABLE_LENGTH ((uint16_t)12)
DSP/Include/arm_common_tables.h:#define ARMBITREVINDEXTABLE_FIXED_32_TABLE_LENGTH ((uint16_t)24)
DSP/Include/arm_common_tables.h:#define ARMBITREVINDEXTABLE_FIXED_64_TABLE_LENGTH ((uint16_t)56)
DSP/Include/arm_common_tables.h:#define ARMBITREVINDEXTABLE_FIXED_128_TABLE_LENGTH ((uint16_t)112)
DSP/Include/arm_common_tables.h:#define ARMBITREVINDEXTABLE_FIXED_256_TABLE_LENGTH ((uint16_t)240)
DSP/Include/arm_common_tables.h:#define ARMBITREVINDEXTABLE_FIXED_512_TABLE_LENGTH ((uint16_t)480)
DSP/Include/arm_common_tables.h:#define ARMBITREVINDEXTABLE_FIXED_1024_TABLE_LENGTH ((uint16_t)992)
DSP/Include/arm_common_tables.h:#define ARMBITREVINDEXTABLE_FIXED_2048_TABLE_LENGTH ((uint16_t)1984)
DSP/Include/arm_common_tables.h:#define ARMBITREVINDEXTABLE_FIXED_4096_TABLE_LENGTH ((uint16_t)4032)
DSP/Include/arm_common_tables.h:extern const uint16_t armBitRevIndexTable_fixed_16[ARMBITREVINDEXTABLE_FIXED_16_TABLE_LENGTH];
DSP/Include/arm_common_tables.h:extern const uint16_t armBitRevIndexTable_fixed_32[ARMBITREVINDEXTABLE_FIXED_32_TABLE_LENGTH];
DSP/Include/arm_common_tables.h:extern const uint16_t armBitRevIndexTable_fixed_64[ARMBITREVINDEXTABLE_FIXED_64_TABLE_LENGTH];
DSP/Include/arm_common_tables.h:extern const uint16_t armBitRevIndexTable_fixed_128[ARMBITREVINDEXTABLE_FIXED_128_TABLE_LENGTH];
DSP/Include/arm_common_tables.h:extern const uint16_t armBitRevIndexTable_fixed_256[ARMBITREVINDEXTABLE_FIXED_256_TABLE_LENGTH];
DSP/Include/arm_common_tables.h:extern const uint16_t armBitRevIndexTable_fixed_512[ARMBITREVINDEXTABLE_FIXED_512_TABLE_LENGTH];
DSP/Include/arm_common_tables.h:extern const uint16_t armBitRevIndexTable_fixed_1024[ARMBITREVINDEXTABLE_FIXED_1024_TABLE_LENGTH];
DSP/Include/arm_common_tables.h:extern const uint16_t armBitRevIndexTable_fixed_2048[ARMBITREVINDEXTABLE_FIXED_2048_TABLE_LENGTH];
DSP/Include/arm_common_tables.h:extern const uint16_t armBitRevIndexTable_fixed_4096[ARMBITREVINDEXTABLE_FIXED_4096_TABLE_LENGTH];
DSP/Include/arm_math.h: *       uint16_t numRows;     // number of rows of the matrix.
DSP/Include/arm_math.h: *       uint16_t numCols;     // number of columns of the matrix.
DSP/Include/arm_math.h:  typedef int16_t q15_t;
DSP/Include/arm_math.h:    uint16_t numTaps;        /**< number of filter coefficients in the filter. */
DSP/Include/arm_math.h:    uint16_t numTaps;         /**< number of filter coefficients in the filter. */
DSP/Include/arm_math.h:    uint16_t numTaps;         /**< number of filter coefficients in the filter. */
DSP/Include/arm_math.h:    uint16_t numTaps;     /**< number of filter coefficients in the filter. */
DSP/Include/arm_math.h:  uint16_t numTaps,
DSP/Include/arm_math.h:  uint16_t numTaps,
DSP/Include/arm_math.h:  uint16_t numTaps,
DSP/Include/arm_math.h:  uint16_t numTaps,
DSP/Include/arm_math.h:    uint16_t numRows;     /**< number of rows of the matrix.     */
DSP/Include/arm_math.h:    uint16_t numCols;     /**< number of columns of the matrix.  */
DSP/Include/arm_math.h:    uint16_t numRows;     /**< number of rows of the matrix.     */
DSP/Include/arm_math.h:    uint16_t numCols;     /**< number of columns of the matrix.  */
DSP/Include/arm_math.h:    uint16_t numRows;     /**< number of rows of the matrix.     */
DSP/Include/arm_math.h:    uint16_t numCols;     /**< number of columns of the matrix.  */
DSP/Include/arm_math.h:    uint16_t numRows;     /**< number of rows of the matrix.     */
DSP/Include/arm_math.h:    uint16_t numCols;     /**< number of columns of the matrix.  */
DSP/Include/arm_math.h:  uint16_t nRows,
DSP/Include/arm_math.h:  uint16_t nColumns,
DSP/Include/arm_math.h:  uint16_t nRows,
DSP/Include/arm_math.h:  uint16_t nColumns,
DSP/Include/arm_math.h:  uint16_t nRows,
DSP/Include/arm_math.h:  uint16_t nColumns,
DSP/Include/arm_math.h:    uint16_t numRows;   /**< number of rows in the data table. */
DSP/Include/arm_math.h:    uint16_t numCols;   /**< number of columns in the data table. */
DSP/Include/arm_math.h:    uint16_t numRows;   /**< number of rows in the data table. */
DSP/Include/arm_math.h:    uint16_t numCols;   /**< number of columns in the data table. */
DSP/Include/arm_math.h:    uint16_t numRows;   /**< number of rows in the data table. */
DSP/Include/arm_math.h:    uint16_t numCols;   /**< number of columns in the data table. */
DSP/Include/arm_math.h:    uint16_t numRows;   /**< number of rows in the data table. */
DSP/Include/arm_math.h:    uint16_t numCols;   /**< number of columns in the data table. */
DSP/Include/arm_math.h:    uint16_t fftLen;                 /**< length of the FFT. */
DSP/Include/arm_math.h:    uint16_t *pBitRevTable;          /**< points to the bit reversal table. */
DSP/Include/arm_math.h:    uint16_t twidCoefModifier;       /**< twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table. */
DSP/Include/arm_math.h:    uint16_t bitRevFactor;           /**< bit reversal modifier that supports different size FFTs with the same bit reversal table. */
DSP/Include/arm_math.h:  uint16_t fftLen,
DSP/Include/arm_math.h:    uint16_t fftLen;                 /**< length of the FFT. */
DSP/Include/arm_math.h:    uint16_t *pBitRevTable;          /**< points to the bit reversal table. */
DSP/Include/arm_math.h:    uint16_t twidCoefModifier;       /**< twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table. */
DSP/Include/arm_math.h:    uint16_t bitRevFactor;           /**< bit reversal modifier that supports different size FFTs with the same bit reversal table. */
DSP/Include/arm_math.h:  uint16_t fftLen,
DSP/Include/arm_math.h:    uint16_t fftLen;                 /**< length of the FFT. */
DSP/Include/arm_math.h:    uint16_t *pBitRevTable;          /**< points to the bit reversal table. */
DSP/Include/arm_math.h:    uint16_t twidCoefModifier;       /**< twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table. */
DSP/Include/arm_math.h:    uint16_t bitRevFactor;           /**< bit reversal modifier that supports different size FFTs with the same bit reversal table. */
DSP/Include/arm_math.h:  uint16_t fftLen,
DSP/Include/arm_math.h:    uint16_t fftLen;                 /**< length of the FFT. */
DSP/Include/arm_math.h:    uint16_t *pBitRevTable;          /**< points to the bit reversal table. */
DSP/Include/arm_math.h:    uint16_t twidCoefModifier;       /**< twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table. */
DSP/Include/arm_math.h:    uint16_t bitRevFactor;           /**< bit reversal modifier that supports different size FFTs with the same bit reversal table. */
DSP/Include/arm_math.h:  uint16_t fftLen,
DSP/Include/arm_math.h:    uint16_t fftLen;                   /**< length of the FFT. */
DSP/Include/arm_math.h:    uint16_t *pBitRevTable;            /**< points to the bit reversal table. */
DSP/Include/arm_math.h:    uint16_t twidCoefModifier;         /**< twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table. */
DSP/Include/arm_math.h:    uint16_t bitRevFactor;             /**< bit reversal modifier that supports different size FFTs with the same bit reversal table. */
DSP/Include/arm_math.h:  uint16_t fftLen,
DSP/Include/arm_math.h:    uint16_t fftLen;                   /**< length of the FFT. */
DSP/Include/arm_math.h:    uint16_t *pBitRevTable;            /**< points to the bit reversal table. */
DSP/Include/arm_math.h:    uint16_t twidCoefModifier;         /**< twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table. */
DSP/Include/arm_math.h:    uint16_t bitRevFactor;             /**< bit reversal modifier that supports different size FFTs with the same bit reversal table. */
DSP/Include/arm_math.h:  uint16_t fftLen,
DSP/Include/arm_math.h:    uint16_t fftLen;                   /**< length of the FFT. */
DSP/Include/arm_math.h:    const uint16_t *pBitRevTable;      /**< points to the bit reversal table. */
DSP/Include/arm_math.h:    uint16_t bitRevLength;             /**< bit reversal table length. */
DSP/Include/arm_math.h:    uint16_t fftLen;                   /**< length of the FFT. */
DSP/Include/arm_math.h:    const uint16_t *pBitRevTable;      /**< points to the bit reversal table. */
DSP/Include/arm_math.h:    uint16_t bitRevLength;             /**< bit reversal table length. */
DSP/Include/arm_math.h:    uint16_t fftLen;                   /**< length of the FFT. */
DSP/Include/arm_math.h:    const uint16_t *pBitRevTable;      /**< points to the bit reversal table. */
DSP/Include/arm_math.h:    uint16_t bitRevLength;             /**< bit reversal table length. */
DSP/Include/arm_math.h:    uint16_t fftLenBy2;                         /**< length of the complex FFT. */
DSP/Include/arm_math.h:    uint16_t fftLenRFFT;             /**< length of the real sequence */
DSP/Include/arm_math.h:   uint16_t fftLen);
DSP/Include/arm_math.h:    uint16_t N;                          /**< length of the DCT4. */
DSP/Include/arm_math.h:    uint16_t Nby2;                       /**< half of the length of the DCT4. */
DSP/Include/arm_math.h:  uint16_t N,
DSP/Include/arm_math.h:  uint16_t Nby2,
DSP/Include/arm_math.h:    uint16_t N;                          /**< length of the DCT4. */
DSP/Include/arm_math.h:    uint16_t Nby2;                       /**< half of the length of the DCT4. */
DSP/Include/arm_math.h:  uint16_t N,
DSP/Include/arm_math.h:  uint16_t Nby2,
DSP/Include/arm_math.h:    uint16_t N;                          /**< length of the DCT4. */
DSP/Include/arm_math.h:    uint16_t Nby2;                       /**< half of the length of the DCT4. */
DSP/Include/arm_math.h:  uint16_t N,
DSP/Include/arm_math.h:  uint16_t Nby2,
DSP/Include/arm_math.h:    uint16_t numTaps;           /**< number of coefficients in the filter. */
DSP/Include/arm_math.h:    uint16_t numTaps;           /**< number of coefficients in the filter. */
DSP/Include/arm_math.h:    uint16_t numTaps;           /**< number of coefficients in the filter. */
DSP/Include/arm_math.h:  uint16_t numTaps,
DSP/Include/arm_math.h:  uint16_t numTaps,
DSP/Include/arm_math.h:  uint16_t numTaps,
DSP/Include/arm_math.h:    uint16_t phaseLength;           /**< length of each polyphase filter component. */
DSP/Include/arm_math.h:    uint16_t phaseLength;           /**< length of each polyphase filter component. */
DSP/Include/arm_math.h:    uint16_t phaseLength;          /**< length of each polyphase filter component. */
DSP/Include/arm_math.h:  uint16_t numTaps,
DSP/Include/arm_math.h:  uint16_t numTaps,
DSP/Include/arm_math.h:  uint16_t numTaps,
DSP/Include/arm_math.h:    uint16_t numStages;                  /**< number of filter stages. */
DSP/Include/arm_math.h:    uint16_t numStages;                  /**< number of filter stages. */
DSP/Include/arm_math.h:    uint16_t numStages;                  /**< number of filter stages. */
DSP/Include/arm_math.h:  uint16_t numStages,
DSP/Include/arm_math.h:  uint16_t numStages,
DSP/Include/arm_math.h:  uint16_t numStages,
DSP/Include/arm_math.h:    uint16_t numStages;                  /**< number of stages in the filter. */
DSP/Include/arm_math.h:    uint16_t numStages;                  /**< number of stages in the filter. */
DSP/Include/arm_math.h:    uint16_t numStages;                  /**< number of stages in the filter. */
DSP/Include/arm_math.h:  uint16_t numStages,
DSP/Include/arm_math.h:  uint16_t numStages,
DSP/Include/arm_math.h:  uint16_t numStages,
DSP/Include/arm_math.h:    uint16_t numTaps;    /**< number of coefficients in the filter. */
DSP/Include/arm_math.h:  uint16_t numTaps,
DSP/Include/arm_math.h:    uint16_t numTaps;    /**< number of coefficients in the filter. */
DSP/Include/arm_math.h:  uint16_t numTaps,
DSP/Include/arm_math.h:    uint16_t numTaps;    /**< number of coefficients in the filter. */
DSP/Include/arm_math.h:  uint16_t numTaps,
DSP/Include/arm_math.h:    uint16_t numTaps;     /**< number of coefficients in the filter. */
DSP/Include/arm_math.h:  uint16_t numTaps,
DSP/Include/arm_math.h:    uint16_t numTaps;     /**< number of coefficients in the filter. */
DSP/Include/arm_math.h:  uint16_t numTaps,
DSP/Include/arm_math.h:    uint16_t numTaps;     /**< Number of coefficients in the filter. */
DSP/Include/arm_math.h:  uint16_t numTaps,
DSP/Include/arm_math.h:    uint16_t numTaps;             /**< number of coefficients in the filter. */
DSP/Include/arm_math.h:    uint16_t stateIndex;          /**< state buffer index.  Points to the oldest sample in the state buffer. */
DSP/Include/arm_math.h:    uint16_t maxDelay;            /**< maximum offset specified by the pTapDelay array. */
DSP/Include/arm_math.h:    uint16_t numTaps;             /**< number of coefficients in the filter. */
DSP/Include/arm_math.h:    uint16_t stateIndex;          /**< state buffer index.  Points to the oldest sample in the state buffer. */
DSP/Include/arm_math.h:    uint16_t maxDelay;            /**< maximum offset specified by the pTapDelay array. */
DSP/Include/arm_math.h:    uint16_t numTaps;             /**< number of coefficients in the filter. */
DSP/Include/arm_math.h:    uint16_t stateIndex;          /**< state buffer index.  Points to the oldest sample in the state buffer. */
DSP/Include/arm_math.h:    uint16_t maxDelay;            /**< maximum offset specified by the pTapDelay array. */
DSP/Include/arm_math.h:    uint16_t numTaps;             /**< number of coefficients in the filter. */
DSP/Include/arm_math.h:    uint16_t stateIndex;          /**< state buffer index.  Points to the oldest sample in the state buffer. */
DSP/Include/arm_math.h:    uint16_t maxDelay;            /**< maximum offset specified by the pTapDelay array. */
DSP/Include/arm_math.h:  uint16_t numTaps,
DSP/Include/arm_math.h:  uint16_t maxDelay,
DSP/Include/arm_math.h:  uint16_t numTaps,
DSP/Include/arm_math.h:  uint16_t maxDelay,
DSP/Include/arm_math.h:  uint16_t numTaps,
DSP/Include/arm_math.h:  uint16_t maxDelay,
DSP/Include/arm_math.h:  uint16_t numTaps,
DSP/Include/arm_math.h:  uint16_t maxDelay,
DSP/Include/arm_math.h:  uint16_t * writeOffset,
DSP/Include/arm_math.h:    *writeOffset = (uint16_t)wOffset;
DSP/Include/arm_math.h:  uint16_t * writeOffset,
DSP/Include/arm_math.h:    *writeOffset = (uint16_t)wOffset;
DSP/Include/arm_math.h:  uint16_t * writeOffset,
DSP/Include/arm_math.h:    *writeOffset = (uint16_t)wOffset;
DSP/Include/arm_math.h:   *     uint16_t numRows;
DSP/Include/arm_math.h:   *     uint16_t numCols;
Binary file DSP/Lib/libarm_cortexM0l_math.a matches
Binary file DSP/Lib/build/Source/ComplexMathFunctions/arm_cmplx_dot_prod_q31.o matches
Binary file DSP/Lib/build/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.o matches
Binary file DSP/Lib/build/Source/ComplexMathFunctions/arm_cmplx_conj_q31.o matches
Binary file DSP/Lib/build/Source/ComplexMathFunctions/arm_cmplx_dot_prod_q15.o matches
Binary file DSP/Lib/build/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.o matches
Binary file DSP/Lib/build/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.o matches
Binary file DSP/Lib/build/Source/ComplexMathFunctions/arm_cmplx_mag_squared_q15.o matches
Binary file DSP/Lib/build/Source/ComplexMathFunctions/arm_cmplx_mag_q31.o matches
Binary file DSP/Lib/build/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.o matches
Binary file DSP/Lib/build/Source/ComplexMathFunctions/arm_cmplx_mult_real_q31.o matches
Binary file DSP/Lib/build/Source/ComplexMathFunctions/arm_cmplx_mag_f32.o matches
Binary file DSP/Lib/build/Source/ComplexMathFunctions/arm_cmplx_mag_q15.o matches
Binary file DSP/Lib/build/Source/ComplexMathFunctions/arm_cmplx_mag_squared_q31.o matches
Binary file DSP/Lib/build/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.o matches
Binary file DSP/Lib/build/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.o matches
Binary file DSP/Lib/build/Source/ComplexMathFunctions/arm_cmplx_conj_q15.o matches
Binary file DSP/Lib/build/Source/ComplexMathFunctions/arm_cmplx_mult_real_q15.o matches
Binary file DSP/Lib/build/Source/ComplexMathFunctions/arm_cmplx_conj_f32.o matches
Binary file DSP/Lib/build/Source/CommonTables/arm_common_tables.o matches
Binary file DSP/Lib/build/Source/CommonTables/arm_const_structs.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_negate_q31.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_add_f32.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_dot_prod_f32.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_scale_q31.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_negate_f32.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_mult_q31.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_sub_q15.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_add_q7.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_shift_q15.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_sub_q7.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_dot_prod_q15.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_mult_q15.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_offset_f32.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_abs_q7.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_shift_q7.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_scale_q7.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_dot_prod_q7.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_negate_q15.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_sub_f32.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_scale_f32.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_add_q15.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_abs_q31.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_sub_q31.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_offset_q15.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_scale_q15.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_abs_q15.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_mult_f32.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_add_q31.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_offset_q7.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_shift_q31.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_offset_q31.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_dot_prod_q31.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_negate_q7.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_mult_q7.o matches
Binary file DSP/Lib/build/Source/BasicMathFunctions/arm_abs_f32.o matches
Binary file DSP/Lib/build/Source/MatrixFunctions/arm_mat_mult_f32.o matches
Binary file DSP/Lib/build/Source/MatrixFunctions/arm_mat_scale_q31.o matches
Binary file DSP/Lib/build/Source/MatrixFunctions/arm_mat_trans_q15.o matches
Binary file DSP/Lib/build/Source/MatrixFunctions/arm_mat_init_q15.o matches
Binary file DSP/Lib/build/Source/MatrixFunctions/arm_mat_mult_fast_q15.o matches
Binary file DSP/Lib/build/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.o matches
Binary file DSP/Lib/build/Source/MatrixFunctions/arm_mat_sub_f32.o matches
Binary file DSP/Lib/build/Source/MatrixFunctions/arm_mat_scale_q15.o matches
Binary file DSP/Lib/build/Source/MatrixFunctions/arm_mat_cmplx_mult_q15.o matches
Binary file DSP/Lib/build/Source/MatrixFunctions/arm_mat_scale_f32.o matches
Binary file DSP/Lib/build/Source/MatrixFunctions/arm_mat_add_q31.o matches
Binary file DSP/Lib/build/Source/MatrixFunctions/arm_mat_sub_q31.o matches
Binary file DSP/Lib/build/Source/MatrixFunctions/arm_mat_add_f32.o matches
Binary file DSP/Lib/build/Source/MatrixFunctions/arm_mat_mult_q31.o matches
Binary file DSP/Lib/build/Source/MatrixFunctions/arm_mat_add_q15.o matches
Binary file DSP/Lib/build/Source/MatrixFunctions/arm_mat_init_q31.o matches
Binary file DSP/Lib/build/Source/MatrixFunctions/arm_mat_sub_q15.o matches
Binary file DSP/Lib/build/Source/MatrixFunctions/arm_mat_mult_q15.o matches
Binary file DSP/Lib/build/Source/MatrixFunctions/arm_mat_inverse_f64.o matches
Binary file DSP/Lib/build/Source/MatrixFunctions/arm_mat_trans_f32.o matches
Binary file DSP/Lib/build/Source/MatrixFunctions/arm_mat_trans_q31.o matches
Binary file DSP/Lib/build/Source/MatrixFunctions/arm_mat_inverse_f32.o matches
Binary file DSP/Lib/build/Source/MatrixFunctions/arm_mat_init_f32.o matches
Binary file DSP/Lib/build/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.o matches
Binary file DSP/Lib/build/Source/MatrixFunctions/arm_mat_mult_fast_q31.o matches
Binary file DSP/Lib/build/Source/StatisticsFunctions/arm_power_q15.o matches
Binary file DSP/Lib/build/Source/StatisticsFunctions/arm_max_q15.o matches
Binary file DSP/Lib/build/Source/StatisticsFunctions/arm_min_q15.o matches
Binary file DSP/Lib/build/Source/StatisticsFunctions/arm_min_q31.o matches
Binary file DSP/Lib/build/Source/StatisticsFunctions/arm_max_q31.o matches
Binary file DSP/Lib/build/Source/StatisticsFunctions/arm_mean_f32.o matches
Binary file DSP/Lib/build/Source/StatisticsFunctions/arm_rms_q15.o matches
Binary file DSP/Lib/build/Source/StatisticsFunctions/arm_rms_q31.o matches
Binary file DSP/Lib/build/Source/StatisticsFunctions/arm_max_f32.o matches
Binary file DSP/Lib/build/Source/StatisticsFunctions/arm_var_q31.o matches
Binary file DSP/Lib/build/Source/StatisticsFunctions/arm_power_q7.o matches
Binary file DSP/Lib/build/Source/StatisticsFunctions/arm_mean_q31.o matches
Binary file DSP/Lib/build/Source/StatisticsFunctions/arm_mean_q7.o matches
Binary file DSP/Lib/build/Source/StatisticsFunctions/arm_min_q7.o matches
Binary file DSP/Lib/build/Source/StatisticsFunctions/arm_power_f32.o matches
Binary file DSP/Lib/build/Source/StatisticsFunctions/arm_power_q31.o matches
Binary file DSP/Lib/build/Source/StatisticsFunctions/arm_std_f32.o matches
Binary file DSP/Lib/build/Source/StatisticsFunctions/arm_var_q15.o matches
Binary file DSP/Lib/build/Source/StatisticsFunctions/arm_std_q31.o matches
Binary file DSP/Lib/build/Source/StatisticsFunctions/arm_var_f32.o matches
Binary file DSP/Lib/build/Source/StatisticsFunctions/arm_std_q15.o matches
Binary file DSP/Lib/build/Source/StatisticsFunctions/arm_min_f32.o matches
Binary file DSP/Lib/build/Source/StatisticsFunctions/arm_rms_f32.o matches
Binary file DSP/Lib/build/Source/StatisticsFunctions/arm_mean_q15.o matches
Binary file DSP/Lib/build/Source/StatisticsFunctions/arm_max_q7.o matches
Binary file DSP/Lib/build/Source/ControllerFunctions/arm_pid_init_q31.o matches
Binary file DSP/Lib/build/Source/ControllerFunctions/arm_sin_cos_f32.o matches
Binary file DSP/Lib/build/Source/ControllerFunctions/arm_pid_reset_q31.o matches
Binary file DSP/Lib/build/Source/ControllerFunctions/arm_pid_init_q15.o matches
Binary file DSP/Lib/build/Source/ControllerFunctions/arm_sin_cos_q31.o matches
Binary file DSP/Lib/build/Source/ControllerFunctions/arm_pid_init_f32.o matches
Binary file DSP/Lib/build/Source/ControllerFunctions/arm_pid_reset_f32.o matches
Binary file DSP/Lib/build/Source/ControllerFunctions/arm_pid_reset_q15.o matches
Binary file DSP/Lib/build/Source/FastMathFunctions/arm_sqrt_q15.o matches
Binary file DSP/Lib/build/Source/FastMathFunctions/arm_cos_q31.o matches
Binary file DSP/Lib/build/Source/FastMathFunctions/arm_cos_f32.o matches
Binary file DSP/Lib/build/Source/FastMathFunctions/arm_cos_q15.o matches
Binary file DSP/Lib/build/Source/FastMathFunctions/arm_sin_f32.o matches
Binary file DSP/Lib/build/Source/FastMathFunctions/arm_sin_q15.o matches
Binary file DSP/Lib/build/Source/FastMathFunctions/arm_sqrt_q31.o matches
Binary file DSP/Lib/build/Source/FastMathFunctions/arm_sin_q31.o matches
Binary file DSP/Lib/build/Source/SupportFunctions/arm_fill_q31.o matches
Binary file DSP/Lib/build/Source/SupportFunctions/arm_q7_to_q15.o matches
Binary file DSP/Lib/build/Source/SupportFunctions/arm_q7_to_q31.o matches
Binary file DSP/Lib/build/Source/SupportFunctions/arm_float_to_q31.o matches
Binary file DSP/Lib/build/Source/SupportFunctions/arm_q31_to_q7.o matches
Binary file DSP/Lib/build/Source/SupportFunctions/arm_fill_f32.o matches
Binary file DSP/Lib/build/Source/SupportFunctions/arm_copy_f32.o matches
Binary file DSP/Lib/build/Source/SupportFunctions/arm_copy_q7.o matches
Binary file DSP/Lib/build/Source/SupportFunctions/arm_q15_to_float.o matches
Binary file DSP/Lib/build/Source/SupportFunctions/arm_float_to_q7.o matches
Binary file DSP/Lib/build/Source/SupportFunctions/arm_copy_q31.o matches
Binary file DSP/Lib/build/Source/SupportFunctions/arm_float_to_q15.o matches
Binary file DSP/Lib/build/Source/SupportFunctions/arm_q31_to_q15.o matches
Binary file DSP/Lib/build/Source/SupportFunctions/arm_q31_to_float.o matches
Binary file DSP/Lib/build/Source/SupportFunctions/arm_q15_to_q31.o matches
Binary file DSP/Lib/build/Source/SupportFunctions/arm_q15_to_q7.o matches
Binary file DSP/Lib/build/Source/SupportFunctions/arm_copy_q15.o matches
Binary file DSP/Lib/build/Source/SupportFunctions/arm_fill_q15.o matches
Binary file DSP/Lib/build/Source/SupportFunctions/arm_fill_q7.o matches
Binary file DSP/Lib/build/Source/SupportFunctions/arm_q7_to_float.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_sparse_q7.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_lattice_init_q31.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_decimate_fast_q31.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_q31.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_interpolate_init_f32.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_interpolate_q31.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_interpolate_f32.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_biquad_cascade_df1_init_q31.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_conv_q7.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_lms_norm_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_conv_fast_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_sparse_f32.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_lattice_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_decimate_fast_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_lms_norm_init_f32.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_conv_f32.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_decimate_init_f32.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_decimate_init_q31.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_decimate_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_correlate_fast_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_correlate_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_sparse_init_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_fast_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_correlate_q7.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_decimate_f32.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_iir_lattice_init_f32.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_biquad_cascade_df1_32x64_q31.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_sparse_init_f32.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_conv_partial_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_lattice_q31.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_correlate_fast_q31.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_iir_lattice_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_conv_partial_fast_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_conv_fast_q31.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_iir_lattice_init_q31.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_biquad_cascade_stereo_df2T_f32.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_lms_init_q31.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_iir_lattice_init_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_f32.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_lattice_f32.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_lattice_init_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_conv_opt_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_biquad_cascade_df1_32x64_init_q31.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_conv_partial_fast_opt_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_lms_norm_init_q31.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_conv_partial_fast_q31.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_q7.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_biquad_cascade_df2T_init_f32.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_conv_q31.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_sparse_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_init_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_interpolate_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_decimate_q31.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_biquad_cascade_df2T_f64.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_biquad_cascade_df1_q31.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_lms_norm_q31.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_sparse_init_q7.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_lms_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_conv_opt_q7.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_interpolate_init_q31.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_biquad_cascade_df1_init_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_iir_lattice_f32.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_correlate_fast_opt_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_biquad_cascade_df1_init_f32.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_lattice_init_f32.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_sparse_init_q31.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_lms_f32.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_conv_fast_opt_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_correlate_opt_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_lms_norm_f32.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_biquad_cascade_stereo_df2T_init_f32.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_fast_q31.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_biquad_cascade_df1_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_lms_init_f32.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_decimate_init_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_conv_partial_opt_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_sparse_q31.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_interpolate_init_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_biquad_cascade_df1_fast_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_correlate_f32.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_conv_partial_q7.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_conv_partial_opt_q7.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_init_q31.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_lms_init_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_lms_norm_init_q15.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_init_f32.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_biquad_cascade_df1_fast_q31.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_conv_partial_f32.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_biquad_cascade_df2T_f32.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_correlate_opt_q7.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_lms_q31.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_correlate_q31.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_conv_partial_q31.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_biquad_cascade_df2T_init_f64.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_fir_init_q7.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_iir_lattice_q31.o matches
Binary file DSP/Lib/build/Source/FilteringFunctions/arm_conv_q15.o matches
Binary file DSP/Lib/build/Source/TransformFunctions/arm_dct4_f32.o matches
Binary file DSP/Lib/build/Source/TransformFunctions/arm_rfft_q31.o matches
Binary file DSP/Lib/build/Source/TransformFunctions/arm_rfft_q15.o matches
Binary file DSP/Lib/build/Source/TransformFunctions/arm_rfft_f32.o matches
Binary file DSP/Lib/build/Source/TransformFunctions/arm_cfft_radix8_f32.o matches
Binary file DSP/Lib/build/Source/TransformFunctions/arm_bitreversal.o matches
Binary file DSP/Lib/build/Source/TransformFunctions/arm_cfft_radix2_f32.o matches
Binary file DSP/Lib/build/Source/TransformFunctions/arm_cfft_radix4_q15.o matches
Binary file DSP/Lib/build/Source/TransformFunctions/arm_cfft_radix2_init_q31.o matches
Binary file DSP/Lib/build/Source/TransformFunctions/arm_cfft_q31.o matches
Binary file DSP/Lib/build/Source/TransformFunctions/arm_rfft_init_f32.o matches
Binary file DSP/Lib/build/Source/TransformFunctions/arm_rfft_fast_init_f32.o matches
Binary file DSP/Lib/build/Source/TransformFunctions/arm_cfft_radix4_init_q31.o matches
Binary file DSP/Lib/build/Source/TransformFunctions/arm_cfft_radix2_init_q15.o matches
Binary file DSP/Lib/build/Source/TransformFunctions/arm_cfft_radix2_q31.o matches
Binary file DSP/Lib/build/Source/TransformFunctions/arm_dct4_init_f32.o matches
Binary file DSP/Lib/build/Source/TransformFunctions/arm_dct4_q31.o matches
Binary file DSP/Lib/build/Source/TransformFunctions/arm_cfft_f32.o matches
Binary file DSP/Lib/build/Source/TransformFunctions/arm_dct4_init_q15.o matches
Binary file DSP/Lib/build/Source/TransformFunctions/arm_cfft_radix4_init_f32.o matches
Binary file DSP/Lib/build/Source/TransformFunctions/arm_cfft_q15.o matches
Binary file DSP/Lib/build/Source/TransformFunctions/arm_cfft_radix2_init_f32.o matches
Binary file DSP/Lib/build/Source/TransformFunctions/arm_rfft_init_q31.o matches
Binary file DSP/Lib/build/Source/TransformFunctions/arm_dct4_init_q31.o matches
Binary file DSP/Lib/build/Source/TransformFunctions/arm_cfft_radix4_q31.o matches
Binary file DSP/Lib/build/Source/TransformFunctions/arm_rfft_init_q15.o matches
Binary file DSP/Lib/build/Source/TransformFunctions/arm_cfft_radix4_init_q15.o matches
Binary file DSP/Lib/build/Source/TransformFunctions/arm_dct4_q15.o matches
Binary file DSP/Lib/build/Source/TransformFunctions/arm_rfft_fast_f32.o matches
Binary file DSP/Lib/build/Source/TransformFunctions/arm_cfft_radix4_f32.o matches
Binary file DSP/Lib/build/Source/TransformFunctions/arm_cfft_radix2_q15.o matches
DSP/Source/CommonTables/arm_common_tables.c:const uint16_t armBitRevTable[1024] = {
DSP/Source/CommonTables/arm_common_tables.c:const uint16_t armBitRevIndexTable16[ARMBITREVINDEXTABLE_16_TABLE_LENGTH] =
DSP/Source/CommonTables/arm_common_tables.c:const uint16_t armBitRevIndexTable32[ARMBITREVINDEXTABLE_32_TABLE_LENGTH] =
DSP/Source/CommonTables/arm_common_tables.c:const uint16_t armBitRevIndexTable64[ARMBITREVINDEXTABLE_64_TABLE_LENGTH] =
DSP/Source/CommonTables/arm_common_tables.c:const uint16_t armBitRevIndexTable128[ARMBITREVINDEXTABLE_128_TABLE_LENGTH] =
DSP/Source/CommonTables/arm_common_tables.c:const uint16_t armBitRevIndexTable256[ARMBITREVINDEXTABLE_256_TABLE_LENGTH] =
DSP/Source/CommonTables/arm_common_tables.c:const uint16_t armBitRevIndexTable512[ARMBITREVINDEXTABLE_512_TABLE_LENGTH] =
DSP/Source/CommonTables/arm_common_tables.c:const uint16_t armBitRevIndexTable1024[ARMBITREVINDEXTABLE_1024_TABLE_LENGTH] =
DSP/Source/CommonTables/arm_common_tables.c:const uint16_t armBitRevIndexTable2048[ARMBITREVINDEXTABLE_2048_TABLE_LENGTH] =
DSP/Source/CommonTables/arm_common_tables.c:const uint16_t armBitRevIndexTable4096[ARMBITREVINDEXTABLE_4096_TABLE_LENGTH] =
DSP/Source/CommonTables/arm_common_tables.c:const uint16_t armBitRevIndexTable_fixed_16[ARMBITREVINDEXTABLE_FIXED_16_TABLE_LENGTH] =
DSP/Source/CommonTables/arm_common_tables.c:const uint16_t armBitRevIndexTable_fixed_32[ARMBITREVINDEXTABLE_FIXED_32_TABLE_LENGTH] =
DSP/Source/CommonTables/arm_common_tables.c:const uint16_t armBitRevIndexTable_fixed_64[ARMBITREVINDEXTABLE_FIXED_64_TABLE_LENGTH] =
DSP/Source/CommonTables/arm_common_tables.c:const uint16_t armBitRevIndexTable_fixed_128[ARMBITREVINDEXTABLE_FIXED_128_TABLE_LENGTH] =
DSP/Source/CommonTables/arm_common_tables.c:const uint16_t armBitRevIndexTable_fixed_256[ARMBITREVINDEXTABLE_FIXED_256_TABLE_LENGTH] =
DSP/Source/CommonTables/arm_common_tables.c:const uint16_t armBitRevIndexTable_fixed_512[ARMBITREVINDEXTABLE_FIXED_512_TABLE_LENGTH] =
DSP/Source/CommonTables/arm_common_tables.c:const uint16_t armBitRevIndexTable_fixed_1024[ARMBITREVINDEXTABLE_FIXED_1024_TABLE_LENGTH] =
DSP/Source/CommonTables/arm_common_tables.c:const uint16_t armBitRevIndexTable_fixed_2048[ARMBITREVINDEXTABLE_FIXED_2048_TABLE_LENGTH] =
DSP/Source/CommonTables/arm_common_tables.c:const uint16_t armBitRevIndexTable_fixed_4096[ARMBITREVINDEXTABLE_FIXED_4096_TABLE_LENGTH] =
DSP/Source/MatrixFunctions/arm_mat_add_q15.c:  uint16_t numSamples;                           /* total number of elements in the matrix  */
DSP/Source/MatrixFunctions/arm_mat_add_q15.c:    numSamples = (uint16_t) (pSrcA->numRows * pSrcA->numCols);
DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q15.c:  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A    */
DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q15.c:  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q15.c:  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q15.c:  uint16_t numRowsB = pSrcB->numRows;            /* number of rows of input matrix A    */
DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q15.c:  uint16_t col, i = 0U, row = numRowsB, colCnt;  /* loop counters */
DSP/Source/MatrixFunctions/arm_mat_trans_q15.c:  uint16_t nRows = pSrc->numRows;                /* number of nRows */
DSP/Source/MatrixFunctions/arm_mat_trans_q15.c:  uint16_t nColumns = pSrc->numCols;             /* number of nColumns */
DSP/Source/MatrixFunctions/arm_mat_trans_q15.c:  uint16_t col, row = nRows, i = 0U;             /* row and column loop counters */
DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c:  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c:  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c:  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c:  uint16_t col, i = 0U, j, row = numRowsA, colCnt;      /* loop counters */
DSP/Source/MatrixFunctions/arm_mat_init_f32.c:  uint16_t nRows,
DSP/Source/MatrixFunctions/arm_mat_init_f32.c:  uint16_t nColumns,
DSP/Source/MatrixFunctions/arm_mat_mult_fast_q31.c:  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A    */
DSP/Source/MatrixFunctions/arm_mat_mult_fast_q31.c:  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
DSP/Source/MatrixFunctions/arm_mat_mult_fast_q31.c:  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
DSP/Source/MatrixFunctions/arm_mat_mult_q15.c:  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A    */
DSP/Source/MatrixFunctions/arm_mat_mult_q15.c:  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
DSP/Source/MatrixFunctions/arm_mat_mult_q15.c:  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
DSP/Source/MatrixFunctions/arm_mat_mult_q15.c:  uint16_t numRowsB = pSrcB->numRows;            /* number of rows of input matrix A    */
DSP/Source/MatrixFunctions/arm_mat_mult_q15.c:  uint16_t col, i = 0U, row = numRowsB, colCnt;  /* loop counters */
DSP/Source/MatrixFunctions/arm_mat_mult_q15.c:  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
DSP/Source/MatrixFunctions/arm_mat_mult_q15.c:  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
DSP/Source/MatrixFunctions/arm_mat_mult_q15.c:  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A    */
DSP/Source/MatrixFunctions/arm_mat_mult_q15.c:  uint16_t col, i = 0U, row = numRowsA, colCnt;  /* loop counters */
DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c:  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c:  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c:  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
DSP/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c:  uint16_t col, i = 0U, j, row = numRowsA, colCnt;      /* loop counters */
DSP/Source/MatrixFunctions/arm_mat_init_q15.c:  uint16_t nRows,
DSP/Source/MatrixFunctions/arm_mat_init_q15.c:  uint16_t nColumns,
DSP/Source/MatrixFunctions/arm_mat_init_q31.c:  uint16_t nRows,
DSP/Source/MatrixFunctions/arm_mat_init_q31.c:  uint16_t nColumns,
DSP/Source/MatrixFunctions/arm_mat_mult_f32.c:  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
DSP/Source/MatrixFunctions/arm_mat_mult_f32.c:  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
DSP/Source/MatrixFunctions/arm_mat_mult_f32.c:  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
DSP/Source/MatrixFunctions/arm_mat_mult_f32.c:  uint16_t col, i = 0U, j, row = numRowsA, colCnt;      /* loop counters */
DSP/Source/MatrixFunctions/arm_mat_mult_f32.c:  uint16_t col, i = 0U, row = numRowsA, colCnt;  /* loop counters */
DSP/Source/MatrixFunctions/arm_mat_trans_f32.c:  uint16_t nRows = pSrc->numRows;                /* number of rows */
DSP/Source/MatrixFunctions/arm_mat_trans_f32.c:  uint16_t nColumns = pSrc->numCols;             /* number of columns */
DSP/Source/MatrixFunctions/arm_mat_trans_f32.c:  uint16_t blkCnt, i = 0U, row = nRows;          /* loop counters */
DSP/Source/MatrixFunctions/arm_mat_trans_f32.c:  uint16_t col, i = 0U, row = nRows;             /* loop counters */
DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c:  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A    */
DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c:  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c:  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
DSP/Source/MatrixFunctions/arm_mat_mult_fast_q15.c:  uint16_t numRowsB = pSrcB->numRows;            /* number of rows of input matrix A    */
DSP/Source/MatrixFunctions/arm_mat_mult_q31.c:  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A    */
DSP/Source/MatrixFunctions/arm_mat_mult_q31.c:  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
DSP/Source/MatrixFunctions/arm_mat_mult_q31.c:  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
DSP/Source/MatrixFunctions/arm_mat_mult_q31.c:  uint16_t col, i = 0U, j, row = numRowsA, colCnt;      /* loop counters */
DSP/Source/MatrixFunctions/arm_mat_mult_q31.c:  uint16_t col, i = 0U, row = numRowsA, colCnt;  /* loop counters */
DSP/Source/MatrixFunctions/arm_mat_trans_q31.c:  uint16_t nRows = pSrc->numRows;                /* number of nRows */
DSP/Source/MatrixFunctions/arm_mat_trans_q31.c:  uint16_t nColumns = pSrc->numCols;             /* number of nColumns  */
DSP/Source/MatrixFunctions/arm_mat_trans_q31.c:  uint16_t blkCnt, i = 0U, row = nRows;          /* loop counters */
DSP/Source/MatrixFunctions/arm_mat_trans_q31.c:  uint16_t col, i = 0U, row = nRows;             /* loop counters */
DSP/Source/html/group__FIR__Lattice.html:<tr class="memitem:ga86199a1590af2b8941c6532ee9d03229"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__FIR__Lattice.html#ga86199a1590af2b8941c6532ee9d03229">arm_fir_lattice_init_f32</a> (arm_fir_lattice_instance_f32 *S, uint16_t numStages, float32_t *pCoeffs, float32_t *pState)</td></tr>
DSP/Source/html/group__FIR__Lattice.html:<tr class="memitem:ga1b22f30ce1cc19bf5a5d7c9fca154d72"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__FIR__Lattice.html#ga1b22f30ce1cc19bf5a5d7c9fca154d72">arm_fir_lattice_init_q15</a> (arm_fir_lattice_instance_q15 *S, uint16_t numStages, q15_t *pCoeffs, q15_t *pState)</td></tr>
DSP/Source/html/group__FIR__Lattice.html:<tr class="memitem:gac05a17a0188bb851b58d19e572870a54"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__FIR__Lattice.html#gac05a17a0188bb851b58d19e572870a54">arm_fir_lattice_init_q31</a> (arm_fir_lattice_instance_q31 *S, uint16_t numStages, q31_t *pCoeffs, q31_t *pState)</td></tr>
DSP/Source/html/group__FIR__Lattice.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__FIR__Lattice.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__FIR__Lattice.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/deprecated.html:<dt><a class="anchor" id="_deprecated000002"></a>Member <a class="el" href="group__ComplexFFT.html#gac9565e6bc7229577ecf5e090313cafd7">arm_cfft_radix2_init_f32</a>  (arm_cfft_radix2_instance_f32 *S, uint16_t fftLen, uint8_t ifftFlag, uint8_t bitReverseFlag)</dt>
DSP/Source/html/deprecated.html:<dt><a class="anchor" id="_deprecated000003"></a>Member <a class="el" href="group__ComplexFFT.html#ga5c5b2127b3c4ea2d03692127f8543858">arm_cfft_radix2_init_q15</a>  (arm_cfft_radix2_instance_q15 *S, uint16_t fftLen, uint8_t ifftFlag, uint8_t bitReverseFlag)</dt>
DSP/Source/html/deprecated.html:<dt><a class="anchor" id="_deprecated000004"></a>Member <a class="el" href="group__ComplexFFT.html#gabec9611e77382f31e152668bf6b4b638">arm_cfft_radix2_init_q31</a>  (arm_cfft_radix2_instance_q31 *S, uint16_t fftLen, uint8_t ifftFlag, uint8_t bitReverseFlag)</dt>
DSP/Source/html/deprecated.html:<dt><a class="anchor" id="_deprecated000008"></a>Member <a class="el" href="group__ComplexFFT.html#gaf336459f684f0b17bfae539ef1b1b78a">arm_cfft_radix4_init_f32</a>  (arm_cfft_radix4_instance_f32 *S, uint16_t fftLen, uint8_t ifftFlag, uint8_t bitReverseFlag)</dt>
DSP/Source/html/deprecated.html:<dt><a class="anchor" id="_deprecated000009"></a>Member <a class="el" href="group__ComplexFFT.html#ga0c2acfda3126c452e75b81669e8ad9ef">arm_cfft_radix4_init_q15</a>  (arm_cfft_radix4_instance_q15 *S, uint16_t fftLen, uint8_t ifftFlag, uint8_t bitReverseFlag)</dt>
DSP/Source/html/deprecated.html:<dt><a class="anchor" id="_deprecated000010"></a>Member <a class="el" href="group__ComplexFFT.html#gad5caaafeec900c8ff72321c01bbd462c">arm_cfft_radix4_init_q31</a>  (arm_cfft_radix4_instance_q31 *S, uint16_t fftLen, uint8_t ifftFlag, uint8_t bitReverseFlag)</dt>
DSP/Source/html/group__ComplexFFT.html:<tr class="memitem:gac9565e6bc7229577ecf5e090313cafd7"><td class="memItemLeft" align="right" valign="top">arm_status&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__ComplexFFT.html#gac9565e6bc7229577ecf5e090313cafd7">arm_cfft_radix2_init_f32</a> (arm_cfft_radix2_instance_f32 *S, uint16_t fftLen, uint8_t ifftFlag, uint8_t bitReverseFlag)</td></tr>
DSP/Source/html/group__ComplexFFT.html:<tr class="memitem:ga5c5b2127b3c4ea2d03692127f8543858"><td class="memItemLeft" align="right" valign="top">arm_status&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__ComplexFFT.html#ga5c5b2127b3c4ea2d03692127f8543858">arm_cfft_radix2_init_q15</a> (arm_cfft_radix2_instance_q15 *S, uint16_t fftLen, uint8_t ifftFlag, uint8_t bitReverseFlag)</td></tr>
DSP/Source/html/group__ComplexFFT.html:<tr class="memitem:gabec9611e77382f31e152668bf6b4b638"><td class="memItemLeft" align="right" valign="top">arm_status&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__ComplexFFT.html#gabec9611e77382f31e152668bf6b4b638">arm_cfft_radix2_init_q31</a> (arm_cfft_radix2_instance_q31 *S, uint16_t fftLen, uint8_t ifftFlag, uint8_t bitReverseFlag)</td></tr>
DSP/Source/html/group__ComplexFFT.html:<tr class="memitem:gaf336459f684f0b17bfae539ef1b1b78a"><td class="memItemLeft" align="right" valign="top">arm_status&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__ComplexFFT.html#gaf336459f684f0b17bfae539ef1b1b78a">arm_cfft_radix4_init_f32</a> (arm_cfft_radix4_instance_f32 *S, uint16_t fftLen, uint8_t ifftFlag, uint8_t bitReverseFlag)</td></tr>
DSP/Source/html/group__ComplexFFT.html:<tr class="memitem:ga0c2acfda3126c452e75b81669e8ad9ef"><td class="memItemLeft" align="right" valign="top">arm_status&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__ComplexFFT.html#ga0c2acfda3126c452e75b81669e8ad9ef">arm_cfft_radix4_init_q15</a> (arm_cfft_radix4_instance_q15 *S, uint16_t fftLen, uint8_t ifftFlag, uint8_t bitReverseFlag)</td></tr>
DSP/Source/html/group__ComplexFFT.html:<tr class="memitem:gad5caaafeec900c8ff72321c01bbd462c"><td class="memItemLeft" align="right" valign="top">arm_status&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__ComplexFFT.html#gad5caaafeec900c8ff72321c01bbd462c">arm_cfft_radix4_init_q31</a> (arm_cfft_radix4_instance_q31 *S, uint16_t fftLen, uint8_t ifftFlag, uint8_t bitReverseFlag)</td></tr>
DSP/Source/html/group__ComplexFFT.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__ComplexFFT.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__ComplexFFT.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__ComplexFFT.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__ComplexFFT.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__ComplexFFT.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__LMS.html:<tr class="memitem:ga9fc7adca0966ff2cec1746fca8364cee"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__LMS.html#ga9fc7adca0966ff2cec1746fca8364cee">arm_lms_init_f32</a> (arm_lms_instance_f32 *S, uint16_t numTaps, float32_t *pCoeffs, float32_t *pState, float32_t mu, uint32_t blockSize)</td></tr>
DSP/Source/html/group__LMS.html:<tr class="memitem:ga9544cc26f18cd4465cfbed371be822b3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__LMS.html#ga9544cc26f18cd4465cfbed371be822b3">arm_lms_init_q15</a> (arm_lms_instance_q15 *S, uint16_t numTaps, q15_t *pCoeffs, q15_t *pState, q15_t mu, uint32_t blockSize, uint32_t postShift)</td></tr>
DSP/Source/html/group__LMS.html:<tr class="memitem:ga8d4bc251169f4b102355097a9f7530d6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__LMS.html#ga8d4bc251169f4b102355097a9f7530d6">arm_lms_init_q31</a> (arm_lms_instance_q31 *S, uint16_t numTaps, q31_t *pCoeffs, q31_t *pState, q31_t mu, uint32_t blockSize, uint32_t postShift)</td></tr>
DSP/Source/html/group__LMS.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__LMS.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__LMS.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__MatrixInit.html:<tr class="memitem:ga11e3dc41592a6401c13182fef9416a27"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__MatrixInit.html#ga11e3dc41592a6401c13182fef9416a27">arm_mat_init_f32</a> (arm_matrix_instance_f32 *S, uint16_t nRows, uint16_t nColumns, float32_t *pData)</td></tr>
DSP/Source/html/group__MatrixInit.html:<tr class="memitem:ga31a7c2b991803d49719393eb2d53dc26"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__MatrixInit.html#ga31a7c2b991803d49719393eb2d53dc26">arm_mat_init_q15</a> (arm_matrix_instance_q15 *S, uint16_t nRows, uint16_t nColumns, q15_t *pData)</td></tr>
DSP/Source/html/group__MatrixInit.html:<tr class="memitem:ga48a5e5d37e1f062cc57fcfaf683343cc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__MatrixInit.html#ga48a5e5d37e1f062cc57fcfaf683343cc">arm_mat_init_q31</a> (arm_matrix_instance_q31 *S, uint16_t nRows, uint16_t nColumns, q31_t *pData)</td></tr>
DSP/Source/html/group__MatrixInit.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__MatrixInit.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__MatrixInit.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__MatrixInit.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__MatrixInit.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__MatrixInit.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__FIR__decimate.html:<tr class="memitem:gaaa2524b08220fd6c3f753e692ffc7d3b"><td class="memItemLeft" align="right" valign="top">arm_status&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__FIR__decimate.html#gaaa2524b08220fd6c3f753e692ffc7d3b">arm_fir_decimate_init_f32</a> (arm_fir_decimate_instance_f32 *S, uint16_t numTaps, uint8_t M, float32_t *pCoeffs, float32_t *pState, uint32_t blockSize)</td></tr>
DSP/Source/html/group__FIR__decimate.html:<tr class="memitem:gada660e54b93d5d32178c6f5e1c6f368d"><td class="memItemLeft" align="right" valign="top">arm_status&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__FIR__decimate.html#gada660e54b93d5d32178c6f5e1c6f368d">arm_fir_decimate_init_q15</a> (arm_fir_decimate_instance_q15 *S, uint16_t numTaps, uint8_t M, q15_t *pCoeffs, q15_t *pState, uint32_t blockSize)</td></tr>
DSP/Source/html/group__FIR__decimate.html:<tr class="memitem:ga9ed47c4e0f58affa935d84e0508a7f39"><td class="memItemLeft" align="right" valign="top">arm_status&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__FIR__decimate.html#ga9ed47c4e0f58affa935d84e0508a7f39">arm_fir_decimate_init_q31</a> (arm_fir_decimate_instance_q31 *S, uint16_t numTaps, uint8_t M, q31_t *pCoeffs, q31_t *pState, uint32_t blockSize)</td></tr>
DSP/Source/html/group__FIR__decimate.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__FIR__decimate.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__FIR__decimate.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__FIR__Interpolate.html:<tr class="memitem:ga0f857457a815946f7e4dca989ebf6ff6"><td class="memItemLeft" align="right" valign="top">arm_status&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__FIR__Interpolate.html#ga0f857457a815946f7e4dca989ebf6ff6">arm_fir_interpolate_init_f32</a> (arm_fir_interpolate_instance_f32 *S, uint8_t L, uint16_t numTaps, float32_t *pCoeffs, float32_t *pState, uint32_t blockSize)</td></tr>
DSP/Source/html/group__FIR__Interpolate.html:<tr class="memitem:ga18e8c4a74ff1d0f88876cc63f675288f"><td class="memItemLeft" align="right" valign="top">arm_status&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__FIR__Interpolate.html#ga18e8c4a74ff1d0f88876cc63f675288f">arm_fir_interpolate_init_q15</a> (arm_fir_interpolate_instance_q15 *S, uint8_t L, uint16_t numTaps, q15_t *pCoeffs, q15_t *pState, uint32_t blockSize)</td></tr>
DSP/Source/html/group__FIR__Interpolate.html:<tr class="memitem:ga9d0ba38ce9f12a850dd242731d307476"><td class="memItemLeft" align="right" valign="top">arm_status&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__FIR__Interpolate.html#ga9d0ba38ce9f12a850dd242731d307476">arm_fir_interpolate_init_q31</a> (arm_fir_interpolate_instance_q31 *S, uint8_t L, uint16_t numTaps, q31_t *pCoeffs, q31_t *pState, uint32_t blockSize)</td></tr>
DSP/Source/html/group__FIR__Interpolate.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__FIR__Interpolate.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__FIR__Interpolate.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__RealFFT.html:<tr class="memitem:gac5fceb172551e7c11eb4d0e17ef15aa3"><td class="memItemLeft" align="right" valign="top">arm_status&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__RealFFT.html#gac5fceb172551e7c11eb4d0e17ef15aa3">arm_rfft_fast_init_f32</a> (arm_rfft_fast_instance_f32 *S, uint16_t fftLen)</td></tr>
DSP/Source/html/group__RealFFT.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__LMS__NORM.html:<tr class="memitem:gac7ccbaea863882056eee815456464670"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__LMS__NORM.html#gac7ccbaea863882056eee815456464670">arm_lms_norm_init_f32</a> (arm_lms_norm_instance_f32 *S, uint16_t numTaps, float32_t *pCoeffs, float32_t *pState, float32_t mu, uint32_t blockSize)</td></tr>
DSP/Source/html/group__LMS__NORM.html:<tr class="memitem:ga213ab1ee2e154cc2fa30d667b1994b89"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__LMS__NORM.html#ga213ab1ee2e154cc2fa30d667b1994b89">arm_lms_norm_init_q15</a> (arm_lms_norm_instance_q15 *S, uint16_t numTaps, q15_t *pCoeffs, q15_t *pState, q15_t mu, uint32_t blockSize, uint8_t postShift)</td></tr>
DSP/Source/html/group__LMS__NORM.html:<tr class="memitem:ga1d9659dbbea4c89a7a9d14d5fc0dd490"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__LMS__NORM.html#ga1d9659dbbea4c89a7a9d14d5fc0dd490">arm_lms_norm_init_q31</a> (arm_lms_norm_instance_q31 *S, uint16_t numTaps, q31_t *pCoeffs, q31_t *pState, q31_t mu, uint32_t blockSize, uint8_t postShift)</td></tr>
DSP/Source/html/group__LMS__NORM.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__LMS__NORM.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__LMS__NORM.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__FIR.html:<tr class="memitem:ga98d13def6427e29522829f945d0967db"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__FIR.html#ga98d13def6427e29522829f945d0967db">arm_fir_init_f32</a> (arm_fir_instance_f32 *S, uint16_t numTaps, float32_t *pCoeffs, float32_t *pState, uint32_t blockSize)</td></tr>
DSP/Source/html/group__FIR.html:<tr class="memitem:gae2a50f692f41ba57e44ed0719b1368bd"><td class="memItemLeft" align="right" valign="top">arm_status&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__FIR.html#gae2a50f692f41ba57e44ed0719b1368bd">arm_fir_init_q15</a> (arm_fir_instance_q15 *S, uint16_t numTaps, q15_t *pCoeffs, q15_t *pState, uint32_t blockSize)</td></tr>
DSP/Source/html/group__FIR.html:<tr class="memitem:gac00d53af87684cbbe135767b55e748a5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__FIR.html#gac00d53af87684cbbe135767b55e748a5">arm_fir_init_q31</a> (arm_fir_instance_q31 *S, uint16_t numTaps, q31_t *pCoeffs, q31_t *pState, uint32_t blockSize)</td></tr>
DSP/Source/html/group__FIR.html:<tr class="memitem:ga88e48688224d42dc173dbcec702f0c1d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__FIR.html#ga88e48688224d42dc173dbcec702f0c1d">arm_fir_init_q7</a> (arm_fir_instance_q7 *S, uint16_t numTaps, q7_t *pCoeffs, q7_t *pState, uint32_t blockSize)</td></tr>
DSP/Source/html/group__FIR.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__FIR.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__FIR.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__FIR.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__CFFT__CIFFT.html:<tr class="memitem:gae247e83ad50d474107254e25b36ad42b"><td class="memItemLeft" align="right" valign="top">const uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CFFT__CIFFT.html#gae247e83ad50d474107254e25b36ad42b">armBitRevTable</a> [1024]</td></tr>
DSP/Source/html/group__CFFT__CIFFT.html:          <td class="memname">const uint16_t armBitRevTable[1024]</td>
DSP/Source/html/group__FIR__Sparse.html:<tr class="memitem:ga86378a08a9d9e1e0e5de77843b34d396"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__FIR__Sparse.html#ga86378a08a9d9e1e0e5de77843b34d396">arm_fir_sparse_init_f32</a> (arm_fir_sparse_instance_f32 *S, uint16_t numTaps, float32_t *pCoeffs, float32_t *pState, int32_t *pTapDelay, uint16_t maxDelay, uint32_t blockSize)</td></tr>
DSP/Source/html/group__FIR__Sparse.html:<tr class="memitem:ga5eaa80bf72bcccef5a2c5fc6648d1baa"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__FIR__Sparse.html#ga5eaa80bf72bcccef5a2c5fc6648d1baa">arm_fir_sparse_init_q15</a> (arm_fir_sparse_instance_q15 *S, uint16_t numTaps, q15_t *pCoeffs, q15_t *pState, int32_t *pTapDelay, uint16_t maxDelay, uint32_t blockSize)</td></tr>
DSP/Source/html/group__FIR__Sparse.html:<tr class="memitem:ga9a0bb2134bc85d3e55c6be6d946ee634"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__FIR__Sparse.html#ga9a0bb2134bc85d3e55c6be6d946ee634">arm_fir_sparse_init_q31</a> (arm_fir_sparse_instance_q31 *S, uint16_t numTaps, q31_t *pCoeffs, q31_t *pState, int32_t *pTapDelay, uint16_t maxDelay, uint32_t blockSize)</td></tr>
DSP/Source/html/group__FIR__Sparse.html:<tr class="memitem:ga98f5c1a097d4572ce4ff3b0c58ebcdbd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__FIR__Sparse.html#ga98f5c1a097d4572ce4ff3b0c58ebcdbd">arm_fir_sparse_init_q7</a> (arm_fir_sparse_instance_q7 *S, uint16_t numTaps, q7_t *pCoeffs, q7_t *pState, int32_t *pTapDelay, uint16_t maxDelay, uint32_t blockSize)</td></tr>
DSP/Source/html/group__FIR__Sparse.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__FIR__Sparse.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__FIR__Sparse.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__FIR__Sparse.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__FIR__Sparse.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__FIR__Sparse.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__FIR__Sparse.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__FIR__Sparse.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__DCT4__IDCT4.html:<tr class="memitem:gab094ad3bc6fa1b84e8b12a24e1850a06"><td class="memItemLeft" align="right" valign="top">arm_status&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__DCT4__IDCT4.html#gab094ad3bc6fa1b84e8b12a24e1850a06">arm_dct4_init_f32</a> (arm_dct4_instance_f32 *S, arm_rfft_instance_f32 *S_RFFT, arm_cfft_radix4_instance_f32 *S_CFFT, uint16_t N, uint16_t Nby2, float32_t normalize)</td></tr>
DSP/Source/html/group__DCT4__IDCT4.html:<tr class="memitem:ga966fd1b66a80873964533703ab5dc054"><td class="memItemLeft" align="right" valign="top">arm_status&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__DCT4__IDCT4.html#ga966fd1b66a80873964533703ab5dc054">arm_dct4_init_q15</a> (arm_dct4_instance_q15 *S, arm_rfft_instance_q15 *S_RFFT, arm_cfft_radix4_instance_q15 *S_CFFT, uint16_t N, uint16_t Nby2, q15_t normalize)</td></tr>
DSP/Source/html/group__DCT4__IDCT4.html:<tr class="memitem:ga631bb59c7c97c814ff7147ecba6a716a"><td class="memItemLeft" align="right" valign="top">arm_status&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__DCT4__IDCT4.html#ga631bb59c7c97c814ff7147ecba6a716a">arm_dct4_init_q31</a> (arm_dct4_instance_q31 *S, arm_rfft_instance_q31 *S_RFFT, arm_cfft_radix4_instance_q31 *S_CFFT, uint16_t N, uint16_t Nby2, q31_t normalize)</td></tr>
DSP/Source/html/group__DCT4__IDCT4.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__DCT4__IDCT4.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__DCT4__IDCT4.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__DCT4__IDCT4.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__DCT4__IDCT4.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__DCT4__IDCT4.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__IIR__Lattice.html:<tr class="memitem:gaed3b0230bb77439dc902daa625985e04"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__IIR__Lattice.html#gaed3b0230bb77439dc902daa625985e04">arm_iir_lattice_init_f32</a> (arm_iir_lattice_instance_f32 *S, uint16_t numStages, float32_t *pkCoeffs, float32_t *pvCoeffs, float32_t *pState, uint32_t blockSize)</td></tr>
DSP/Source/html/group__IIR__Lattice.html:<tr class="memitem:ga1f4bc2dd3d5641e96815d3a5aad58998"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__IIR__Lattice.html#ga1f4bc2dd3d5641e96815d3a5aad58998">arm_iir_lattice_init_q15</a> (arm_iir_lattice_instance_q15 *S, uint16_t numStages, q15_t *pkCoeffs, q15_t *pvCoeffs, q15_t *pState, uint32_t blockSize)</td></tr>
DSP/Source/html/group__IIR__Lattice.html:<tr class="memitem:gab686c14175581797d9c3ad7bf1d5cc1e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__IIR__Lattice.html#gab686c14175581797d9c3ad7bf1d5cc1e">arm_iir_lattice_init_q31</a> (arm_iir_lattice_instance_q31 *S, uint16_t numStages, q31_t *pkCoeffs, q31_t *pvCoeffs, q31_t *pState, uint32_t blockSize)</td></tr>
DSP/Source/html/group__IIR__Lattice.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__IIR__Lattice.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/html/group__IIR__Lattice.html:          <td class="paramtype">uint16_t&#160;</td>
DSP/Source/ControllerFunctions/arm_sin_cos_f32.c:    uint16_t indexS, indexC;                         /* Index variable */
DSP/Source/ControllerFunctions/arm_sin_cos_f32.c:    indexS = ((uint16_t)findex) & 0x1ff;
DSP/Source/ControllerFunctions/arm_sin_cos_q31.c:  uint16_t indexS, indexC;                     /* Index variable */
DSP/Source/FastMathFunctions/arm_cos_q15.c:  x = (uint16_t)x + 0x2000;
DSP/Source/FastMathFunctions/arm_cos_q15.c:      x = (uint16_t)x + 0x8000;
DSP/Source/FastMathFunctions/arm_sin_f32.c:  uint16_t index;                                        /* Index variable */
DSP/Source/FastMathFunctions/arm_sin_f32.c:  index = ((uint16_t)findex) & 0x1ff;
DSP/Source/FastMathFunctions/arm_cos_f32.c:  uint16_t index;                                /* Index variable */
DSP/Source/FastMathFunctions/arm_cos_f32.c:  index = ((uint16_t)findex) & 0x1ff;
DSP/Source/FilteringFunctions/arm_lms_init_q31.c:  uint16_t numTaps,
DSP/Source/FilteringFunctions/arm_fir_init_q15.c:  uint16_t numTaps,
DSP/Source/FilteringFunctions/arm_fir_init_f32.c:  uint16_t numTaps,
DSP/Source/FilteringFunctions/arm_fir_interpolate_init_q15.c:  uint16_t numTaps,
DSP/Source/FilteringFunctions/arm_lms_norm_init_f32.c:  uint16_t numTaps,
DSP/Source/FilteringFunctions/arm_fir_decimate_init_q31.c:  uint16_t numTaps,
DSP/Source/FilteringFunctions/arm_lms_norm_init_q31.c:  uint16_t numTaps,
DSP/Source/FilteringFunctions/arm_fir_lattice_init_f32.c:  uint16_t numStages,
DSP/Source/FilteringFunctions/arm_fir_sparse_q15.c:  uint16_t numTaps = S->numTaps;                 /* Filter order */
DSP/Source/FilteringFunctions/arm_fir_sparse_init_f32.c:  uint16_t numTaps,
DSP/Source/FilteringFunctions/arm_fir_sparse_init_f32.c:  uint16_t maxDelay,
DSP/Source/FilteringFunctions/arm_fir_lattice_init_q31.c:  uint16_t numStages,
DSP/Source/FilteringFunctions/arm_fir_sparse_f32.c:  uint16_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter  */
DSP/Source/FilteringFunctions/arm_fir_decimate_init_f32.c:  uint16_t numTaps,
DSP/Source/FilteringFunctions/arm_fir_sparse_q31.c:  uint16_t numTaps = S->numTaps;                 /* Filter order */
DSP/Source/FilteringFunctions/arm_fir_sparse_init_q15.c:  uint16_t numTaps,
DSP/Source/FilteringFunctions/arm_fir_sparse_init_q15.c:  uint16_t maxDelay,
DSP/Source/FilteringFunctions/arm_iir_lattice_init_f32.c:  uint16_t numStages,
DSP/Source/FilteringFunctions/arm_fir_sparse_init_q7.c:  uint16_t numTaps,
DSP/Source/FilteringFunctions/arm_fir_sparse_init_q7.c:  uint16_t maxDelay,
DSP/Source/FilteringFunctions/arm_fir_interpolate_init_f32.c:  uint16_t numTaps,
DSP/Source/FilteringFunctions/arm_fir_interpolate_f32.c:  uint16_t phaseLen = S->phaseLength, tapCnt;    /* Length of each polyphase filter component */
DSP/Source/FilteringFunctions/arm_fir_interpolate_f32.c:  uint16_t phaseLen = S->phaseLength, tapCnt;    /* Length of each polyphase filter component */
DSP/Source/FilteringFunctions/arm_fir_sparse_init_q31.c:  uint16_t numTaps,
DSP/Source/FilteringFunctions/arm_fir_sparse_init_q31.c:  uint16_t maxDelay,
DSP/Source/FilteringFunctions/arm_fir_lattice_init_q15.c:  uint16_t numStages,
DSP/Source/FilteringFunctions/arm_lms_init_q15.c:  uint16_t numTaps,
DSP/Source/FilteringFunctions/arm_fir_init_q7.c:  uint16_t numTaps,
DSP/Source/FilteringFunctions/arm_fir_sparse_q7.c:  uint16_t numTaps = S->numTaps;                 /* Filter order */
DSP/Source/FilteringFunctions/arm_fir_decimate_init_q15.c:  uint16_t numTaps,
DSP/Source/FilteringFunctions/arm_iir_lattice_init_q15.c:  uint16_t numStages,
DSP/Source/FilteringFunctions/arm_iir_lattice_init_q31.c:  uint16_t numStages,
DSP/Source/FilteringFunctions/arm_fir_interpolate_q15.c:  uint16_t phaseLen = S->phaseLength;            /* Length of each polyphase filter component */
DSP/Source/FilteringFunctions/arm_fir_interpolate_q15.c:  uint16_t phaseLen = S->phaseLength;            /* Length of each polyphase filter component */
DSP/Source/FilteringFunctions/arm_lms_init_f32.c:  uint16_t numTaps,
DSP/Source/FilteringFunctions/arm_fir_init_q31.c:  uint16_t numTaps,
DSP/Source/FilteringFunctions/arm_fir_interpolate_q31.c:  uint16_t phaseLen = S->phaseLength, tapCnt;    /* Length of each polyphase filter component */
DSP/Source/FilteringFunctions/arm_fir_interpolate_q31.c:  uint16_t phaseLen = S->phaseLength, tapCnt;    /* Length of each polyphase filter component */
DSP/Source/FilteringFunctions/arm_fir_interpolate_init_q31.c:  uint16_t numTaps,
DSP/Source/FilteringFunctions/arm_lms_norm_init_q15.c:  uint16_t numTaps,
DSP/Source/TransformFunctions/arm_bitreversal.c:uint16_t fftSize,
DSP/Source/TransformFunctions/arm_bitreversal.c:uint16_t bitRevFactor,
DSP/Source/TransformFunctions/arm_bitreversal.c:uint16_t * pBitRevTab)
DSP/Source/TransformFunctions/arm_bitreversal.c:   uint16_t fftLenBy2, fftLenBy2p1;
DSP/Source/TransformFunctions/arm_bitreversal.c:   uint16_t i, j;
DSP/Source/TransformFunctions/arm_bitreversal.c:uint16_t bitRevFactor,
DSP/Source/TransformFunctions/arm_bitreversal.c:uint16_t * pBitRevTable)
DSP/Source/TransformFunctions/arm_bitreversal.c:uint16_t bitRevFactor,
DSP/Source/TransformFunctions/arm_bitreversal.c:uint16_t * pBitRevTab)
DSP/Source/TransformFunctions/arm_dct4_init_q15.c:  uint16_t N,
DSP/Source/TransformFunctions/arm_dct4_init_q15.c:  uint16_t Nby2,
DSP/Source/TransformFunctions/arm_cfft_radix2_q15.c:  uint16_t twidCoefModifier);
DSP/Source/TransformFunctions/arm_cfft_radix2_q15.c:  uint16_t twidCoefModifier);
DSP/Source/TransformFunctions/arm_cfft_radix2_q15.c:  uint16_t bitRevFactor,
DSP/Source/TransformFunctions/arm_cfft_radix2_q15.c:  uint16_t * pBitRevTab);
DSP/Source/TransformFunctions/arm_cfft_radix2_q15.c:  uint16_t twidCoefModifier)
DSP/Source/TransformFunctions/arm_cfft_radix2_q15.c:    in = ((int16_t) (T & 0xFFFF)) >> 1;
DSP/Source/TransformFunctions/arm_cfft_radix2_q15.c:    in = ((int16_t) (S & 0xFFFF)) >> 1;
DSP/Source/TransformFunctions/arm_cfft_radix2_q15.c:    in = ((int16_t) (T & 0xFFFF)) >> 1;
DSP/Source/TransformFunctions/arm_cfft_radix2_q15.c:    in = ((int16_t) (S & 0xFFFF)) >> 1;
DSP/Source/TransformFunctions/arm_cfft_radix2_q15.c:      pSrc[2U * l] = (((int16_t) (((q31_t) xt * cosVal) >> 16)) +
DSP/Source/TransformFunctions/arm_cfft_radix2_q15.c:                      ((int16_t) (((q31_t) yt * sinVal) >> 16)));
DSP/Source/TransformFunctions/arm_cfft_radix2_q15.c:      pSrc[2U * l + 1U] = (((int16_t) (((q31_t) yt * cosVal) >> 16)) -
DSP/Source/TransformFunctions/arm_cfft_radix2_q15.c:                           ((int16_t) (((q31_t) xt * sinVal) >> 16)));
DSP/Source/TransformFunctions/arm_cfft_radix2_q15.c:        pSrc[2U * l] = (((int16_t) (((q31_t) xt * cosVal) >> 16)) +
DSP/Source/TransformFunctions/arm_cfft_radix2_q15.c:                        ((int16_t) (((q31_t) yt * sinVal) >> 16)));
DSP/Source/TransformFunctions/arm_cfft_radix2_q15.c:        pSrc[2U * l + 1U] = (((int16_t) (((q31_t) yt * cosVal) >> 16)) -
DSP/Source/TransformFunctions/arm_cfft_radix2_q15.c:                             ((int16_t) (((q31_t) xt * sinVal) >> 16)));
DSP/Source/TransformFunctions/arm_cfft_radix2_q15.c:  uint16_t twidCoefModifier)
DSP/Source/TransformFunctions/arm_cfft_radix2_q15.c:    in = ((int16_t) (T & 0xFFFF)) >> 1;
DSP/Source/TransformFunctions/arm_cfft_radix2_q15.c:    in = ((int16_t) (S & 0xFFFF)) >> 1;
DSP/Source/TransformFunctions/arm_cfft_radix2_q15.c:    in = ((int16_t) (T & 0xFFFF)) >> 1;
DSP/Source/TransformFunctions/arm_cfft_radix2_q15.c:    in = ((int16_t) (S & 0xFFFF)) >> 1;
DSP/Source/TransformFunctions/arm_cfft_radix2_q15.c:      pSrc[2U * l] = (((int16_t) (((q31_t) xt * cosVal) >> 16)) -
DSP/Source/TransformFunctions/arm_cfft_radix2_q15.c:                      ((int16_t) (((q31_t) yt * sinVal) >> 16)));
DSP/Source/TransformFunctions/arm_cfft_radix2_q15.c:      pSrc[2U * l + 1U] = (((int16_t) (((q31_t) yt * cosVal) >> 16)) +
DSP/Source/TransformFunctions/arm_cfft_radix2_q15.c:                           ((int16_t) (((q31_t) xt * sinVal) >> 16)));
DSP/Source/TransformFunctions/arm_cfft_radix2_q15.c:        pSrc[2U * l] = (((int16_t) (((q31_t) xt * cosVal) >> 16)) -
DSP/Source/TransformFunctions/arm_cfft_radix2_q15.c:                        ((int16_t) (((q31_t) yt * sinVal) >> 16)));
DSP/Source/TransformFunctions/arm_cfft_radix2_q15.c:        pSrc[2U * l + 1U] = (((int16_t) (((q31_t) yt * cosVal) >> 16)) +
DSP/Source/TransformFunctions/arm_cfft_radix2_q15.c:                             ((int16_t) (((q31_t) xt * sinVal) >> 16)));
DSP/Source/TransformFunctions/arm_dct4_q31.c:  uint16_t i;                                    /* Loop counter */
DSP/Source/TransformFunctions/arm_rfft_init_f32.c:  S->fftLenReal = (uint16_t) fftLenReal;
DSP/Source/TransformFunctions/arm_rfft_init_f32.c:  S->fftLenBy2 = (uint16_t) fftLenReal / 2U;
DSP/Source/TransformFunctions/arm_cfft_radix2_init_q15.c:  uint16_t fftLen,
DSP/Source/TransformFunctions/arm_cfft_radix2_init_q15.c:    S->pBitRevTable = (uint16_t *) armBitRevTable;
DSP/Source/TransformFunctions/arm_cfft_radix2_init_q15.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[1];
DSP/Source/TransformFunctions/arm_cfft_radix2_init_q15.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[3];
DSP/Source/TransformFunctions/arm_cfft_radix2_init_q15.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[7];
DSP/Source/TransformFunctions/arm_cfft_radix2_init_q15.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[15];
DSP/Source/TransformFunctions/arm_cfft_radix2_init_q15.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[31];
DSP/Source/TransformFunctions/arm_cfft_radix2_init_q15.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[63];
DSP/Source/TransformFunctions/arm_cfft_radix2_init_q15.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[127];
DSP/Source/TransformFunctions/arm_cfft_radix2_init_q15.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[255];
DSP/Source/TransformFunctions/arm_dct4_init_q31.c:  uint16_t N,
DSP/Source/TransformFunctions/arm_dct4_init_q31.c:  uint16_t Nby2,
DSP/Source/TransformFunctions/arm_rfft_init_q15.c:    S->fftLenReal = (uint16_t) fftLenReal;
DSP/Source/TransformFunctions/arm_cfft_q31.c:    const uint16_t bitRevLen,
DSP/Source/TransformFunctions/arm_cfft_q31.c:    const uint16_t * pBitRevTable);
DSP/Source/TransformFunctions/arm_cfft_radix4_init_f32.c:  uint16_t fftLen,
DSP/Source/TransformFunctions/arm_cfft_radix4_init_f32.c:    S->pBitRevTable = (uint16_t *) armBitRevTable;
DSP/Source/TransformFunctions/arm_cfft_radix4_init_f32.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[3];
DSP/Source/TransformFunctions/arm_cfft_radix4_init_f32.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[15];
DSP/Source/TransformFunctions/arm_cfft_radix4_init_f32.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[63];
DSP/Source/TransformFunctions/arm_cfft_radix4_init_f32.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[255];
DSP/Source/TransformFunctions/arm_dct4_init_f32.c:  uint16_t N,
DSP/Source/TransformFunctions/arm_dct4_init_f32.c:  uint16_t Nby2,
DSP/Source/TransformFunctions/arm_cfft_radix4_q31.c:uint16_t bitRevFactor,
DSP/Source/TransformFunctions/arm_cfft_radix4_q31.c:uint16_t * pBitRevTab);
DSP/Source/TransformFunctions/arm_cfft_radix2_init_f32.c:  uint16_t fftLen,
DSP/Source/TransformFunctions/arm_cfft_radix2_init_f32.c:    S->pBitRevTable = (uint16_t *) armBitRevTable;
DSP/Source/TransformFunctions/arm_cfft_radix2_init_f32.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[1];
DSP/Source/TransformFunctions/arm_cfft_radix2_init_f32.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[3];
DSP/Source/TransformFunctions/arm_cfft_radix2_init_f32.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[7];
DSP/Source/TransformFunctions/arm_cfft_radix2_init_f32.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[15];
DSP/Source/TransformFunctions/arm_cfft_radix2_init_f32.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[31];
DSP/Source/TransformFunctions/arm_cfft_radix2_init_f32.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[63];
DSP/Source/TransformFunctions/arm_cfft_radix2_init_f32.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[127];
DSP/Source/TransformFunctions/arm_cfft_radix2_init_f32.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[255];
DSP/Source/TransformFunctions/arm_rfft_init_q31.c:    S->fftLenReal = (uint16_t) fftLenReal;
DSP/Source/TransformFunctions/arm_cfft_radix4_q15.c:  uint16_t bitRevFactor,
DSP/Source/TransformFunctions/arm_cfft_radix4_q15.c:  uint16_t * pBitRevTab);
DSP/Source/TransformFunctions/arm_cfft_radix4_q15.c:    //in = ((int16_t) (T & 0xFFFF)) >> 2;       // alternative code that takes 3 cycles
DSP/Source/TransformFunctions/arm_rfft_fast_init_f32.c:  uint16_t fftLen)
DSP/Source/TransformFunctions/arm_rfft_fast_init_f32.c:    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable2048;
DSP/Source/TransformFunctions/arm_rfft_fast_init_f32.c:    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable1024;
DSP/Source/TransformFunctions/arm_rfft_fast_init_f32.c:    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable512;
DSP/Source/TransformFunctions/arm_rfft_fast_init_f32.c:    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable256;
DSP/Source/TransformFunctions/arm_rfft_fast_init_f32.c:    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable128;
DSP/Source/TransformFunctions/arm_rfft_fast_init_f32.c:    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable64;
DSP/Source/TransformFunctions/arm_rfft_fast_init_f32.c:    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable32;
DSP/Source/TransformFunctions/arm_rfft_fast_init_f32.c:    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable16;
DSP/Source/TransformFunctions/arm_cfft_radix8_f32.c:uint16_t fftLen,
DSP/Source/TransformFunctions/arm_cfft_radix8_f32.c:uint16_t twidCoefModifier)
DSP/Source/TransformFunctions/arm_cfft_radix4_init_q15.c:  uint16_t fftLen,
DSP/Source/TransformFunctions/arm_cfft_radix4_init_q15.c:    S->pBitRevTable = (uint16_t *) armBitRevTable;
DSP/Source/TransformFunctions/arm_cfft_radix4_init_q15.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[3];
DSP/Source/TransformFunctions/arm_cfft_radix4_init_q15.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[15];
DSP/Source/TransformFunctions/arm_cfft_radix4_init_q15.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[63];
DSP/Source/TransformFunctions/arm_cfft_radix4_init_q15.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[255];
DSP/Source/TransformFunctions/arm_cfft_radix2_f32.c:  uint16_t twidCoefModifier);
DSP/Source/TransformFunctions/arm_cfft_radix2_f32.c:  uint16_t twidCoefModifier,
DSP/Source/TransformFunctions/arm_cfft_radix2_f32.c:    uint16_t fftSize,
DSP/Source/TransformFunctions/arm_cfft_radix2_f32.c:    uint16_t bitRevFactor,
DSP/Source/TransformFunctions/arm_cfft_radix2_f32.c:    uint16_t * pBitRevTab);
DSP/Source/TransformFunctions/arm_cfft_radix2_f32.c:uint16_t twidCoefModifier)
DSP/Source/TransformFunctions/arm_cfft_radix2_f32.c:uint16_t twidCoefModifier,
DSP/Source/TransformFunctions/arm_cfft_q15.c:    uint16_t * pSrc,
DSP/Source/TransformFunctions/arm_cfft_q15.c:    const uint16_t bitRevLen,
DSP/Source/TransformFunctions/arm_cfft_q15.c:    const uint16_t * pBitRevTable);
DSP/Source/TransformFunctions/arm_cfft_q15.c:        arm_bitreversal_16((uint16_t*)p1,S->bitRevLength,S->pBitRevTable);
DSP/Source/TransformFunctions/arm_cfft_q15.c:        pSrc[2U * l] = (((int16_t) (((q31_t) xt * cosVal) >> 16)) +
DSP/Source/TransformFunctions/arm_cfft_q15.c:                  ((int16_t) (((q31_t) yt * sinVal) >> 16)));
DSP/Source/TransformFunctions/arm_cfft_q15.c:        pSrc[2U * l + 1U] = (((int16_t) (((q31_t) yt * cosVal) >> 16)) -
DSP/Source/TransformFunctions/arm_cfft_q15.c:                       ((int16_t) (((q31_t) xt * sinVal) >> 16)));
DSP/Source/TransformFunctions/arm_cfft_q15.c:        pSrc[2U * l] = (((int16_t) (((q31_t) xt * cosVal) >> 16)) -
DSP/Source/TransformFunctions/arm_cfft_q15.c:                        ((int16_t) (((q31_t) yt * sinVal) >> 16)));
DSP/Source/TransformFunctions/arm_cfft_q15.c:        pSrc[2U * l + 1U] = (((int16_t) (((q31_t) yt * cosVal) >> 16)) +
DSP/Source/TransformFunctions/arm_cfft_q15.c:                           ((int16_t) (((q31_t) xt * sinVal) >> 16)));
DSP/Source/TransformFunctions/arm_rfft_f32.c:    uint16_t fftLen,
DSP/Source/TransformFunctions/arm_rfft_f32.c:    uint16_t twidCoefModifier);
DSP/Source/TransformFunctions/arm_rfft_f32.c:    uint16_t fftLen,
DSP/Source/TransformFunctions/arm_rfft_f32.c:    uint16_t twidCoefModifier,
DSP/Source/TransformFunctions/arm_rfft_f32.c:    uint16_t fftSize,
DSP/Source/TransformFunctions/arm_rfft_f32.c:    uint16_t bitRevFactor,
DSP/Source/TransformFunctions/arm_rfft_f32.c:    uint16_t * pBitRevTab);
DSP/Source/TransformFunctions/arm_cfft_radix2_q31.c:  uint16_t twidCoefModifier);
DSP/Source/TransformFunctions/arm_cfft_radix2_q31.c:  uint16_t twidCoefModifier);
DSP/Source/TransformFunctions/arm_cfft_radix2_q31.c:  uint16_t bitRevFactor,
DSP/Source/TransformFunctions/arm_cfft_radix2_q31.c:  uint16_t * pBitRevTab);
DSP/Source/TransformFunctions/arm_cfft_radix2_q31.c:uint16_t twidCoefModifier)
DSP/Source/TransformFunctions/arm_cfft_radix2_q31.c:uint16_t twidCoefModifier)
DSP/Source/TransformFunctions/arm_cfft_f32.c:    uint16_t fftLen,
DSP/Source/TransformFunctions/arm_cfft_f32.c:    uint16_t twidCoefModifier);
DSP/Source/TransformFunctions/arm_cfft_f32.c:    const uint16_t bitRevLen,
DSP/Source/TransformFunctions/arm_cfft_f32.c:    const uint16_t * pBitRevTable);
DSP/Source/TransformFunctions/arm_cfft_radix2_init_q31.c:  uint16_t fftLen,
DSP/Source/TransformFunctions/arm_cfft_radix2_init_q31.c:    S->pBitRevTable = (uint16_t *) armBitRevTable;
DSP/Source/TransformFunctions/arm_cfft_radix2_init_q31.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[1];
DSP/Source/TransformFunctions/arm_cfft_radix2_init_q31.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[3];
DSP/Source/TransformFunctions/arm_cfft_radix2_init_q31.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[7];
DSP/Source/TransformFunctions/arm_cfft_radix2_init_q31.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[15];
DSP/Source/TransformFunctions/arm_cfft_radix2_init_q31.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[31];
DSP/Source/TransformFunctions/arm_cfft_radix2_init_q31.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[63];
DSP/Source/TransformFunctions/arm_cfft_radix2_init_q31.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[127];
DSP/Source/TransformFunctions/arm_cfft_radix2_init_q31.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[255];
DSP/Source/TransformFunctions/arm_cfft_radix4_init_q31.c:  uint16_t fftLen,
DSP/Source/TransformFunctions/arm_cfft_radix4_init_q31.c:    S->pBitRevTable = (uint16_t *) armBitRevTable;
DSP/Source/TransformFunctions/arm_cfft_radix4_init_q31.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[3];
DSP/Source/TransformFunctions/arm_cfft_radix4_init_q31.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[15];
DSP/Source/TransformFunctions/arm_cfft_radix4_init_q31.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[63];
DSP/Source/TransformFunctions/arm_cfft_radix4_init_q31.c:    S->pBitRevTable = (uint16_t *) & armBitRevTable[255];
DSP/Source/TransformFunctions/arm_cfft_radix4_f32.c:uint16_t fftSize,
DSP/Source/TransformFunctions/arm_cfft_radix4_f32.c:uint16_t bitRevFactor,
DSP/Source/TransformFunctions/arm_cfft_radix4_f32.c:uint16_t * pBitRevTab);
DSP/Source/TransformFunctions/arm_cfft_radix4_f32.c:uint16_t fftLen,
DSP/Source/TransformFunctions/arm_cfft_radix4_f32.c:uint16_t twidCoefModifier);
DSP/Source/TransformFunctions/arm_cfft_radix4_f32.c:uint16_t fftLen,
DSP/Source/TransformFunctions/arm_cfft_radix4_f32.c:uint16_t twidCoefModifier,
DSP/Source/TransformFunctions/arm_cfft_radix4_f32.c:uint16_t fftLen,
DSP/Source/TransformFunctions/arm_cfft_radix4_f32.c:uint16_t twidCoefModifier)
DSP/Source/TransformFunctions/arm_cfft_radix4_f32.c:uint16_t fftLen,
DSP/Source/TransformFunctions/arm_cfft_radix4_f32.c:uint16_t twidCoefModifier,
DSP/Source/latex/group__FIR.tex:\subsubsection[{\texorpdfstring{arm\+\_\+fir\+\_\+init\+\_\+f32(arm\+\_\+fir\+\_\+instance\+\_\+f32 $\ast$\+S, uint16\+\_\+t num\+Taps, float32\+\_\+t $\ast$p\+Coeffs, float32\+\_\+t $\ast$p\+State, uint32\+\_\+t block\+Size)}{arm_fir_init_f32(arm_fir_instance_f32 *S, uint16_t numTaps, float32_t *pCoeffs, float32_t *pState, uint32_t blockSize)}}]{\setlength{\rightskip}{0pt plus 5cm}void arm\+\_\+fir\+\_\+init\+\_\+f32 (
DSP/Source/latex/group__FIR.tex:\subsubsection[{\texorpdfstring{arm\+\_\+fir\+\_\+init\+\_\+q15(arm\+\_\+fir\+\_\+instance\+\_\+q15 $\ast$\+S, uint16\+\_\+t num\+Taps, q15\+\_\+t $\ast$p\+Coeffs, q15\+\_\+t $\ast$p\+State, uint32\+\_\+t block\+Size)}{arm_fir_init_q15(arm_fir_instance_q15 *S, uint16_t numTaps, q15_t *pCoeffs, q15_t *pState, uint32_t blockSize)}}]{\setlength{\rightskip}{0pt plus 5cm}arm\+\_\+status arm\+\_\+fir\+\_\+init\+\_\+q15 (
DSP/Source/latex/group__FIR.tex:\subsubsection[{\texorpdfstring{arm\+\_\+fir\+\_\+init\+\_\+q31(arm\+\_\+fir\+\_\+instance\+\_\+q31 $\ast$\+S, uint16\+\_\+t num\+Taps, q31\+\_\+t $\ast$p\+Coeffs, q31\+\_\+t $\ast$p\+State, uint32\+\_\+t block\+Size)}{arm_fir_init_q31(arm_fir_instance_q31 *S, uint16_t numTaps, q31_t *pCoeffs, q31_t *pState, uint32_t blockSize)}}]{\setlength{\rightskip}{0pt plus 5cm}void arm\+\_\+fir\+\_\+init\+\_\+q31 (
DSP/Source/latex/group__FIR.tex:\subsubsection[{\texorpdfstring{arm\+\_\+fir\+\_\+init\+\_\+q7(arm\+\_\+fir\+\_\+instance\+\_\+q7 $\ast$\+S, uint16\+\_\+t num\+Taps, q7\+\_\+t $\ast$p\+Coeffs, q7\+\_\+t $\ast$p\+State, uint32\+\_\+t block\+Size)}{arm_fir_init_q7(arm_fir_instance_q7 *S, uint16_t numTaps, q7_t *pCoeffs, q7_t *pState, uint32_t blockSize)}}]{\setlength{\rightskip}{0pt plus 5cm}void arm\+\_\+fir\+\_\+init\+\_\+q7 (
DSP/Source/latex/group__FIR__decimate.tex:\subsubsection[{\texorpdfstring{arm\+\_\+fir\+\_\+decimate\+\_\+init\+\_\+f32(arm\+\_\+fir\+\_\+decimate\+\_\+instance\+\_\+f32 $\ast$\+S, uint16\+\_\+t num\+Taps, uint8\+\_\+t M, float32\+\_\+t $\ast$p\+Coeffs, float32\+\_\+t $\ast$p\+State, uint32\+\_\+t block\+Size)}{arm_fir_decimate_init_f32(arm_fir_decimate_instance_f32 *S, uint16_t numTaps, uint8_t M, float32_t *pCoeffs, float32_t *pState, uint32_t blockSize)}}]{\setlength{\rightskip}{0pt plus 5cm}arm\+\_\+status arm\+\_\+fir\+\_\+decimate\+\_\+init\+\_\+f32 (
DSP/Source/latex/group__FIR__decimate.tex:\subsubsection[{\texorpdfstring{arm\+\_\+fir\+\_\+decimate\+\_\+init\+\_\+q15(arm\+\_\+fir\+\_\+decimate\+\_\+instance\+\_\+q15 $\ast$\+S, uint16\+\_\+t num\+Taps, uint8\+\_\+t M, q15\+\_\+t $\ast$p\+Coeffs, q15\+\_\+t $\ast$p\+State, uint32\+\_\+t block\+Size)}{arm_fir_decimate_init_q15(arm_fir_decimate_instance_q15 *S, uint16_t numTaps, uint8_t M, q15_t *pCoeffs, q15_t *pState, uint32_t blockSize)}}]{\setlength{\rightskip}{0pt plus 5cm}arm\+\_\+status arm\+\_\+fir\+\_\+decimate\+\_\+init\+\_\+q15 (
DSP/Source/latex/group__FIR__decimate.tex:\subsubsection[{\texorpdfstring{arm\+\_\+fir\+\_\+decimate\+\_\+init\+\_\+q31(arm\+\_\+fir\+\_\+decimate\+\_\+instance\+\_\+q31 $\ast$\+S, uint16\+\_\+t num\+Taps, uint8\+\_\+t M, q31\+\_\+t $\ast$p\+Coeffs, q31\+\_\+t $\ast$p\+State, uint32\+\_\+t block\+Size)}{arm_fir_decimate_init_q31(arm_fir_decimate_instance_q31 *S, uint16_t numTaps, uint8_t M, q31_t *pCoeffs, q31_t *pState, uint32_t blockSize)}}]{\setlength{\rightskip}{0pt plus 5cm}arm\+\_\+status arm\+\_\+fir\+\_\+decimate\+\_\+init\+\_\+q31 (
DSP/Source/latex/group__FIR__Sparse.tex:\subsubsection[{\texorpdfstring{arm\+\_\+fir\+\_\+sparse\+\_\+init\+\_\+f32(arm\+\_\+fir\+\_\+sparse\+\_\+instance\+\_\+f32 $\ast$\+S, uint16\+\_\+t num\+Taps, float32\+\_\+t $\ast$p\+Coeffs, float32\+\_\+t $\ast$p\+State, int32\+\_\+t $\ast$p\+Tap\+Delay, uint16\+\_\+t max\+Delay, uint32\+\_\+t block\+Size)}{arm_fir_sparse_init_f32(arm_fir_sparse_instance_f32 *S, uint16_t numTaps, float32_t *pCoeffs, float32_t *pState, int32_t *pTapDelay, uint16_t maxDelay, uint32_t blockSize)}}]{\setlength{\rightskip}{0pt plus 5cm}void arm\+\_\+fir\+\_\+sparse\+\_\+init\+\_\+f32 (
DSP/Source/latex/group__FIR__Sparse.tex:\subsubsection[{\texorpdfstring{arm\+\_\+fir\+\_\+sparse\+\_\+init\+\_\+q15(arm\+\_\+fir\+\_\+sparse\+\_\+instance\+\_\+q15 $\ast$\+S, uint16\+\_\+t num\+Taps, q15\+\_\+t $\ast$p\+Coeffs, q15\+\_\+t $\ast$p\+State, int32\+\_\+t $\ast$p\+Tap\+Delay, uint16\+\_\+t max\+Delay, uint32\+\_\+t block\+Size)}{arm_fir_sparse_init_q15(arm_fir_sparse_instance_q15 *S, uint16_t numTaps, q15_t *pCoeffs, q15_t *pState, int32_t *pTapDelay, uint16_t maxDelay, uint32_t blockSize)}}]{\setlength{\rightskip}{0pt plus 5cm}void arm\+\_\+fir\+\_\+sparse\+\_\+init\+\_\+q15 (
DSP/Source/latex/group__FIR__Sparse.tex:\subsubsection[{\texorpdfstring{arm\+\_\+fir\+\_\+sparse\+\_\+init\+\_\+q31(arm\+\_\+fir\+\_\+sparse\+\_\+instance\+\_\+q31 $\ast$\+S, uint16\+\_\+t num\+Taps, q31\+\_\+t $\ast$p\+Coeffs, q31\+\_\+t $\ast$p\+State, int32\+\_\+t $\ast$p\+Tap\+Delay, uint16\+\_\+t max\+Delay, uint32\+\_\+t block\+Size)}{arm_fir_sparse_init_q31(arm_fir_sparse_instance_q31 *S, uint16_t numTaps, q31_t *pCoeffs, q31_t *pState, int32_t *pTapDelay, uint16_t maxDelay, uint32_t blockSize)}}]{\setlength{\rightskip}{0pt plus 5cm}void arm\+\_\+fir\+\_\+sparse\+\_\+init\+\_\+q31 (
DSP/Source/latex/group__FIR__Sparse.tex:\subsubsection[{\texorpdfstring{arm\+\_\+fir\+\_\+sparse\+\_\+init\+\_\+q7(arm\+\_\+fir\+\_\+sparse\+\_\+instance\+\_\+q7 $\ast$\+S, uint16\+\_\+t num\+Taps, q7\+\_\+t $\ast$p\+Coeffs, q7\+\_\+t $\ast$p\+State, int32\+\_\+t $\ast$p\+Tap\+Delay, uint16\+\_\+t max\+Delay, uint32\+\_\+t block\+Size)}{arm_fir_sparse_init_q7(arm_fir_sparse_instance_q7 *S, uint16_t numTaps, q7_t *pCoeffs, q7_t *pState, int32_t *pTapDelay, uint16_t maxDelay, uint32_t blockSize)}}]{\setlength{\rightskip}{0pt plus 5cm}void arm\+\_\+fir\+\_\+sparse\+\_\+init\+\_\+q7 (
DSP/Source/latex/group__ComplexFFT.tex.tmp:\subsubsection[{\texorpdfstring{arm\+\_\+cfft\+\_\+radix2\+\_\+init\+\_\+f32(arm\+\_\+cfft\+\_\+radix2\+\_\+instance\+\_\+f32 $\ast$\+S, uint16\+\_\+t fft\+Len, uint8\+\_\+t ifft\+Flag, uint8\+\_\+t bit\+Reverse\+Flag)}{arm_cfft_radix2_init_f32(arm_cfft_radix2_instance_f32 *S, uint16_t fftLen, uint8_t ifftFlag, uint8_t bitReverseFlag)}}]{\setlength{\rightskip}{0pt plus 5cm}arm\+\_\+status arm\+\_\+cfft\+\_\+radix2\+\_\+init\+\_\+f32 (
DSP/Source/latex/group__ComplexFFT.tex.tmp:\subsubsection[{\texorpdfstring{arm\+\_\+cfft\+\_\+radix2\+\_\+init\+\_\+q15(arm\+\_\+cfft\+\_\+radix2\+\_\+instance\+\_\+q15 $\ast$\+S, uint16\+\_\+t fft\+Len, uint8\+\_\+t ifft\+Flag, uint8\+\_\+t bit\+Reverse\+Flag)}{arm_cfft_radix2_init_q15(arm_cfft_radix2_instance_q15 *S, uint16_t fftLen, uint8_t ifftFlag, uint8_t bitReverseFlag)}}]{\setlength{\rightskip}{0pt plus 5cm}arm\+\_\+status arm\+\_\+cfft\+\_\+radix2\+\_\+init\+\_\+q15 (
DSP/Source/latex/group__ComplexFFT.tex.tmp:\subsubsection[{\texorpdfstring{arm\+\_\+cfft\+\_\+radix2\+\_\+init\+\_\+q31(arm\+\_\+cfft\+\_\+radix2\+\_\+instance\+\_\+q31 $\ast$\+S, uint16\+\_\+t fft\+Len, uint8\+\_\+t ifft\+Flag, uint8\+\_\+t bit\+Reverse\+Flag)}{arm_cfft_radix2_init_q31(arm_cfft_radix2_instance_q31 *S, uint16_t fftLen, uint8_t ifftFlag, uint8_t bitReverseFlag)}}]{\setlength{\rightskip}{0pt plus 5cm}arm\+\_\+status arm\+\_\+cfft\+\_\+radix2\+\_\+init\+\_\+q31 (
DSP/Source/latex/group__ComplexFFT.tex.tmp:\subsubsection[{\texorpdfstring{arm\+\_\+cfft\+\_\+radix4\+\_\+init\+\_\+f32(arm\+\_\+cfft\+\_\+radix4\+\_\+instance\+\_\+f32 $\ast$\+S, uint16\+\_\+t fft\+Len, uint8\+\_\+t ifft\+Flag, uint8\+\_\+t bit\+Reverse\+Flag)}{arm_cfft_radix4_init_f32(arm_cfft_radix4_instance_f32 *S, uint16_t fftLen, uint8_t ifftFlag, uint8_t bitReverseFlag)}}]{\setlength{\rightskip}{0pt plus 5cm}arm\+\_\+status arm\+\_\+cfft\+\_\+radix4\+\_\+init\+\_\+f32 (
DSP/Source/latex/group__ComplexFFT.tex.tmp:\subsubsection[{\texorpdfstring{arm\+\_\+cfft\+\_\+radix4\+\_\+init\+\_\+q15(arm\+\_\+cfft\+\_\+radix4\+\_\+instance\+\_\+q15 $\ast$\+S, uint16\+\_\+t fft\+Len, uint8\+\_\+t ifft\+Flag, uint8\+\_\+t bit\+Reverse\+Flag)}{arm_cfft_radix4_init_q15(arm_cfft_radix4_instance_q15 *S, uint16_t fftLen, uint8_t ifftFlag, uint8_t bitReverseFlag)}}]{\setlength{\rightskip}{0pt plus 5cm}arm\+\_\+status arm\+\_\+cfft\+\_\+radix4\+\_\+init\+\_\+q15 (
DSP/Source/latex/group__ComplexFFT.tex.tmp:\subsubsection[{\texorpdfstring{arm\+\_\+cfft\+\_\+radix4\+\_\+init\+\_\+q31(arm\+\_\+cfft\+\_\+radix4\+\_\+instance\+\_\+q31 $\ast$\+S, uint16\+\_\+t fft\+Len, uint8\+\_\+t ifft\+Flag, uint8\+\_\+t bit\+Reverse\+Flag)}{arm_cfft_radix4_init_q31(arm_cfft_radix4_instance_q31 *S, uint16_t fftLen, uint8_t ifftFlag, uint8_t bitReverseFlag)}}]{\setlength{\rightskip}{0pt plus 5cm}arm\+\_\+status arm\+\_\+cfft\+\_\+radix4\+\_\+init\+\_\+q31 (
DSP/Source/latex/group__FIR__Interpolate.tex:\subsubsection[{\texorpdfstring{arm\+\_\+fir\+\_\+interpolate\+\_\+init\+\_\+f32(arm\+\_\+fir\+\_\+interpolate\+\_\+instance\+\_\+f32 $\ast$\+S, uint8\+\_\+t L, uint16\+\_\+t num\+Taps, float32\+\_\+t $\ast$p\+Coeffs, float32\+\_\+t $\ast$p\+State, uint32\+\_\+t block\+Size)}{arm_fir_interpolate_init_f32(arm_fir_interpolate_instance_f32 *S, uint8_t L, uint16_t numTaps, float32_t *pCoeffs, float32_t *pState, uint32_t blockSize)}}]{\setlength{\rightskip}{0pt plus 5cm}arm\+\_\+status arm\+\_\+fir\+\_\+interpolate\+\_\+init\+\_\+f32 (
DSP/Source/latex/group__FIR__Interpolate.tex:\subsubsection[{\texorpdfstring{arm\+\_\+fir\+\_\+interpolate\+\_\+init\+\_\+q15(arm\+\_\+fir\+\_\+interpolate\+\_\+instance\+\_\+q15 $\ast$\+S, uint8\+\_\+t L, uint16\+\_\+t num\+Taps, q15\+\_\+t $\ast$p\+Coeffs, q15\+\_\+t $\ast$p\+State, uint32\+\_\+t block\+Size)}{arm_fir_interpolate_init_q15(arm_fir_interpolate_instance_q15 *S, uint8_t L, uint16_t numTaps, q15_t *pCoeffs, q15_t *pState, uint32_t blockSize)}}]{\setlength{\rightskip}{0pt plus 5cm}arm\+\_\+status arm\+\_\+fir\+\_\+interpolate\+\_\+init\+\_\+q15 (
DSP/Source/latex/group__FIR__Interpolate.tex:\subsubsection[{\texorpdfstring{arm\+\_\+fir\+\_\+interpolate\+\_\+init\+\_\+q31(arm\+\_\+fir\+\_\+interpolate\+\_\+instance\+\_\+q31 $\ast$\+S, uint8\+\_\+t L, uint16\+\_\+t num\+Taps, q31\+\_\+t $\ast$p\+Coeffs, q31\+\_\+t $\ast$p\+State, uint32\+\_\+t block\+Size)}{arm_fir_interpolate_init_q31(arm_fir_interpolate_instance_q31 *S, uint8_t L, uint16_t numTaps, q31_t *pCoeffs, q31_t *pState, uint32_t blockSize)}}]{\setlength{\rightskip}{0pt plus 5cm}arm\+\_\+status arm\+\_\+fir\+\_\+interpolate\+\_\+init\+\_\+q31 (
DSP/Source/latex/group__LMS__NORM.tex:\subsubsection[{\texorpdfstring{arm\+\_\+lms\+\_\+norm\+\_\+init\+\_\+f32(arm\+\_\+lms\+\_\+norm\+\_\+instance\+\_\+f32 $\ast$\+S, uint16\+\_\+t num\+Taps, float32\+\_\+t $\ast$p\+Coeffs, float32\+\_\+t $\ast$p\+State, float32\+\_\+t mu, uint32\+\_\+t block\+Size)}{arm_lms_norm_init_f32(arm_lms_norm_instance_f32 *S, uint16_t numTaps, float32_t *pCoeffs, float32_t *pState, float32_t mu, uint32_t blockSize)}}]{\setlength{\rightskip}{0pt plus 5cm}void arm\+\_\+lms\+\_\+norm\+\_\+init\+\_\+f32 (
DSP/Source/latex/group__LMS__NORM.tex:\subsubsection[{\texorpdfstring{arm\+\_\+lms\+\_\+norm\+\_\+init\+\_\+q15(arm\+\_\+lms\+\_\+norm\+\_\+instance\+\_\+q15 $\ast$\+S, uint16\+\_\+t num\+Taps, q15\+\_\+t $\ast$p\+Coeffs, q15\+\_\+t $\ast$p\+State, q15\+\_\+t mu, uint32\+\_\+t block\+Size, uint8\+\_\+t post\+Shift)}{arm_lms_norm_init_q15(arm_lms_norm_instance_q15 *S, uint16_t numTaps, q15_t *pCoeffs, q15_t *pState, q15_t mu, uint32_t blockSize, uint8_t postShift)}}]{\setlength{\rightskip}{0pt plus 5cm}void arm\+\_\+lms\+\_\+norm\+\_\+init\+\_\+q15 (
DSP/Source/latex/group__LMS__NORM.tex:\subsubsection[{\texorpdfstring{arm\+\_\+lms\+\_\+norm\+\_\+init\+\_\+q31(arm\+\_\+lms\+\_\+norm\+\_\+instance\+\_\+q31 $\ast$\+S, uint16\+\_\+t num\+Taps, q31\+\_\+t $\ast$p\+Coeffs, q31\+\_\+t $\ast$p\+State, q31\+\_\+t mu, uint32\+\_\+t block\+Size, uint8\+\_\+t post\+Shift)}{arm_lms_norm_init_q31(arm_lms_norm_instance_q31 *S, uint16_t numTaps, q31_t *pCoeffs, q31_t *pState, q31_t mu, uint32_t blockSize, uint8_t postShift)}}]{\setlength{\rightskip}{0pt plus 5cm}void arm\+\_\+lms\+\_\+norm\+\_\+init\+\_\+q31 (
DSP/Source/latex/group__DCT4__IDCT4.tex:\subsubsection[{\texorpdfstring{arm\+\_\+dct4\+\_\+init\+\_\+f32(arm\+\_\+dct4\+\_\+instance\+\_\+f32 $\ast$\+S, arm\+\_\+rfft\+\_\+instance\+\_\+f32 $\ast$\+S\+\_\+\+R\+F\+F\+T, arm\+\_\+cfft\+\_\+radix4\+\_\+instance\+\_\+f32 $\ast$\+S\+\_\+\+C\+F\+F\+T, uint16\+\_\+t N, uint16\+\_\+t Nby2, float32\+\_\+t normalize)}{arm_dct4_init_f32(arm_dct4_instance_f32 *S, arm_rfft_instance_f32 *S_RFFT, arm_cfft_radix4_instance_f32 *S_CFFT, uint16_t N, uint16_t Nby2, float32_t normalize)}}]{\setlength{\rightskip}{0pt plus 5cm}arm\+\_\+status arm\+\_\+dct4\+\_\+init\+\_\+f32 (
DSP/Source/latex/group__DCT4__IDCT4.tex:\subsubsection[{\texorpdfstring{arm\+\_\+dct4\+\_\+init\+\_\+q15(arm\+\_\+dct4\+\_\+instance\+\_\+q15 $\ast$\+S, arm\+\_\+rfft\+\_\+instance\+\_\+q15 $\ast$\+S\+\_\+\+R\+F\+F\+T, arm\+\_\+cfft\+\_\+radix4\+\_\+instance\+\_\+q15 $\ast$\+S\+\_\+\+C\+F\+F\+T, uint16\+\_\+t N, uint16\+\_\+t Nby2, q15\+\_\+t normalize)}{arm_dct4_init_q15(arm_dct4_instance_q15 *S, arm_rfft_instance_q15 *S_RFFT, arm_cfft_radix4_instance_q15 *S_CFFT, uint16_t N, uint16_t Nby2, q15_t normalize)}}]{\setlength{\rightskip}{0pt plus 5cm}arm\+\_\+status arm\+\_\+dct4\+\_\+init\+\_\+q15 (
DSP/Source/latex/group__DCT4__IDCT4.tex:\subsubsection[{\texorpdfstring{arm\+\_\+dct4\+\_\+init\+\_\+q31(arm\+\_\+dct4\+\_\+instance\+\_\+q31 $\ast$\+S, arm\+\_\+rfft\+\_\+instance\+\_\+q31 $\ast$\+S\+\_\+\+R\+F\+F\+T, arm\+\_\+cfft\+\_\+radix4\+\_\+instance\+\_\+q31 $\ast$\+S\+\_\+\+C\+F\+F\+T, uint16\+\_\+t N, uint16\+\_\+t Nby2, q31\+\_\+t normalize)}{arm_dct4_init_q31(arm_dct4_instance_q31 *S, arm_rfft_instance_q31 *S_RFFT, arm_cfft_radix4_instance_q31 *S_CFFT, uint16_t N, uint16_t Nby2, q31_t normalize)}}]{\setlength{\rightskip}{0pt plus 5cm}arm\+\_\+status arm\+\_\+dct4\+\_\+init\+\_\+q31 (
DSP/Source/latex/group__MatrixInit.tex:\subsubsection[{\texorpdfstring{arm\+\_\+mat\+\_\+init\+\_\+f32(arm\+\_\+matrix\+\_\+instance\+\_\+f32 $\ast$\+S, uint16\+\_\+t n\+Rows, uint16\+\_\+t n\+Columns, float32\+\_\+t $\ast$p\+Data)}{arm_mat_init_f32(arm_matrix_instance_f32 *S, uint16_t nRows, uint16_t nColumns, float32_t *pData)}}]{\setlength{\rightskip}{0pt plus 5cm}void arm\+\_\+mat\+\_\+init\+\_\+f32 (
DSP/Source/latex/group__MatrixInit.tex:\subsubsection[{\texorpdfstring{arm\+\_\+mat\+\_\+init\+\_\+q15(arm\+\_\+matrix\+\_\+instance\+\_\+q15 $\ast$\+S, uint16\+\_\+t n\+Rows, uint16\+\_\+t n\+Columns, q15\+\_\+t $\ast$p\+Data)}{arm_mat_init_q15(arm_matrix_instance_q15 *S, uint16_t nRows, uint16_t nColumns, q15_t *pData)}}]{\setlength{\rightskip}{0pt plus 5cm}void arm\+\_\+mat\+\_\+init\+\_\+q15 (
DSP/Source/latex/group__MatrixInit.tex:\subsubsection[{\texorpdfstring{arm\+\_\+mat\+\_\+init\+\_\+q31(arm\+\_\+matrix\+\_\+instance\+\_\+q31 $\ast$\+S, uint16\+\_\+t n\+Rows, uint16\+\_\+t n\+Columns, q31\+\_\+t $\ast$p\+Data)}{arm_mat_init_q31(arm_matrix_instance_q31 *S, uint16_t nRows, uint16_t nColumns, q31_t *pData)}}]{\setlength{\rightskip}{0pt plus 5cm}void arm\+\_\+mat\+\_\+init\+\_\+q31 (
DSP/Source/latex/group__FIR__Lattice.tex:\subsubsection[{\texorpdfstring{arm\+\_\+fir\+\_\+lattice\+\_\+init\+\_\+f32(arm\+\_\+fir\+\_\+lattice\+\_\+instance\+\_\+f32 $\ast$\+S, uint16\+\_\+t num\+Stages, float32\+\_\+t $\ast$p\+Coeffs, float32\+\_\+t $\ast$p\+State)}{arm_fir_lattice_init_f32(arm_fir_lattice_instance_f32 *S, uint16_t numStages, float32_t *pCoeffs, float32_t *pState)}}]{\setlength{\rightskip}{0pt plus 5cm}void arm\+\_\+fir\+\_\+lattice\+\_\+init\+\_\+f32 (
DSP/Source/latex/group__FIR__Lattice.tex:\subsubsection[{\texorpdfstring{arm\+\_\+fir\+\_\+lattice\+\_\+init\+\_\+q15(arm\+\_\+fir\+\_\+lattice\+\_\+instance\+\_\+q15 $\ast$\+S, uint16\+\_\+t num\+Stages, q15\+\_\+t $\ast$p\+Coeffs, q15\+\_\+t $\ast$p\+State)}{arm_fir_lattice_init_q15(arm_fir_lattice_instance_q15 *S, uint16_t numStages, q15_t *pCoeffs, q15_t *pState)}}]{\setlength{\rightskip}{0pt plus 5cm}void arm\+\_\+fir\+\_\+lattice\+\_\+init\+\_\+q15 (
DSP/Source/latex/group__FIR__Lattice.tex:\subsubsection[{\texorpdfstring{arm\+\_\+fir\+\_\+lattice\+\_\+init\+\_\+q31(arm\+\_\+fir\+\_\+lattice\+\_\+instance\+\_\+q31 $\ast$\+S, uint16\+\_\+t num\+Stages, q31\+\_\+t $\ast$p\+Coeffs, q31\+\_\+t $\ast$p\+State)}{arm_fir_lattice_init_q31(arm_fir_lattice_instance_q31 *S, uint16_t numStages, q31_t *pCoeffs, q31_t *pState)}}]{\setlength{\rightskip}{0pt plus 5cm}void arm\+\_\+fir\+\_\+lattice\+\_\+init\+\_\+q31 (
DSP/Source/latex/group__RealFFT.tex:\subsubsection[{\texorpdfstring{arm\+\_\+rfft\+\_\+fast\+\_\+init\+\_\+f32(arm\+\_\+rfft\+\_\+fast\+\_\+instance\+\_\+f32 $\ast$\+S, uint16\+\_\+t fft\+Len)}{arm_rfft_fast_init_f32(arm_rfft_fast_instance_f32 *S, uint16_t fftLen)}}]{\setlength{\rightskip}{0pt plus 5cm}arm\+\_\+status arm\+\_\+rfft\+\_\+fast\+\_\+init\+\_\+f32 (
DSP/Source/latex/group__IIR__Lattice.tex:\subsubsection[{\texorpdfstring{arm\+\_\+iir\+\_\+lattice\+\_\+init\+\_\+f32(arm\+\_\+iir\+\_\+lattice\+\_\+instance\+\_\+f32 $\ast$\+S, uint16\+\_\+t num\+Stages, float32\+\_\+t $\ast$pk\+Coeffs, float32\+\_\+t $\ast$pv\+Coeffs, float32\+\_\+t $\ast$p\+State, uint32\+\_\+t block\+Size)}{arm_iir_lattice_init_f32(arm_iir_lattice_instance_f32 *S, uint16_t numStages, float32_t *pkCoeffs, float32_t *pvCoeffs, float32_t *pState, uint32_t blockSize)}}]{\setlength{\rightskip}{0pt plus 5cm}void arm\+\_\+iir\+\_\+lattice\+\_\+init\+\_\+f32 (
DSP/Source/latex/group__IIR__Lattice.tex:\subsubsection[{\texorpdfstring{arm\+\_\+iir\+\_\+lattice\+\_\+init\+\_\+q15(arm\+\_\+iir\+\_\+lattice\+\_\+instance\+\_\+q15 $\ast$\+S, uint16\+\_\+t num\+Stages, q15\+\_\+t $\ast$pk\+Coeffs, q15\+\_\+t $\ast$pv\+Coeffs, q15\+\_\+t $\ast$p\+State, uint32\+\_\+t block\+Size)}{arm_iir_lattice_init_q15(arm_iir_lattice_instance_q15 *S, uint16_t numStages, q15_t *pkCoeffs, q15_t *pvCoeffs, q15_t *pState, uint32_t blockSize)}}]{\setlength{\rightskip}{0pt plus 5cm}void arm\+\_\+iir\+\_\+lattice\+\_\+init\+\_\+q15 (
DSP/Source/latex/group__IIR__Lattice.tex:\subsubsection[{\texorpdfstring{arm\+\_\+iir\+\_\+lattice\+\_\+init\+\_\+q31(arm\+\_\+iir\+\_\+lattice\+\_\+instance\+\_\+q31 $\ast$\+S, uint16\+\_\+t num\+Stages, q31\+\_\+t $\ast$pk\+Coeffs, q31\+\_\+t $\ast$pv\+Coeffs, q31\+\_\+t $\ast$p\+State, uint32\+\_\+t block\+Size)}{arm_iir_lattice_init_q31(arm_iir_lattice_instance_q31 *S, uint16_t numStages, q31_t *pkCoeffs, q31_t *pvCoeffs, q31_t *pState, uint32_t blockSize)}}]{\setlength{\rightskip}{0pt plus 5cm}void arm\+\_\+iir\+\_\+lattice\+\_\+init\+\_\+q31 (
DSP/Source/latex/group__LMS.tex:\subsubsection[{\texorpdfstring{arm\+\_\+lms\+\_\+init\+\_\+f32(arm\+\_\+lms\+\_\+instance\+\_\+f32 $\ast$\+S, uint16\+\_\+t num\+Taps, float32\+\_\+t $\ast$p\+Coeffs, float32\+\_\+t $\ast$p\+State, float32\+\_\+t mu, uint32\+\_\+t block\+Size)}{arm_lms_init_f32(arm_lms_instance_f32 *S, uint16_t numTaps, float32_t *pCoeffs, float32_t *pState, float32_t mu, uint32_t blockSize)}}]{\setlength{\rightskip}{0pt plus 5cm}void arm\+\_\+lms\+\_\+init\+\_\+f32 (
DSP/Source/latex/group__LMS.tex:\subsubsection[{\texorpdfstring{arm\+\_\+lms\+\_\+init\+\_\+q15(arm\+\_\+lms\+\_\+instance\+\_\+q15 $\ast$\+S, uint16\+\_\+t num\+Taps, q15\+\_\+t $\ast$p\+Coeffs, q15\+\_\+t $\ast$p\+State, q15\+\_\+t mu, uint32\+\_\+t block\+Size, uint32\+\_\+t post\+Shift)}{arm_lms_init_q15(arm_lms_instance_q15 *S, uint16_t numTaps, q15_t *pCoeffs, q15_t *pState, q15_t mu, uint32_t blockSize, uint32_t postShift)}}]{\setlength{\rightskip}{0pt plus 5cm}void arm\+\_\+lms\+\_\+init\+\_\+q15 (
DSP/Source/latex/group__LMS.tex:\subsubsection[{\texorpdfstring{arm\+\_\+lms\+\_\+init\+\_\+q31(arm\+\_\+lms\+\_\+instance\+\_\+q31 $\ast$\+S, uint16\+\_\+t num\+Taps, q31\+\_\+t $\ast$p\+Coeffs, q31\+\_\+t $\ast$p\+State, q31\+\_\+t mu, uint32\+\_\+t block\+Size, uint32\+\_\+t post\+Shift)}{arm_lms_init_q31(arm_lms_instance_q31 *S, uint16_t numTaps, q31_t *pCoeffs, q31_t *pState, q31_t mu, uint32_t blockSize, uint32_t postShift)}}]{\setlength{\rightskip}{0pt plus 5cm}void arm\+\_\+lms\+\_\+init\+\_\+q31 (
DSP/DSP_Lib_TestSuite/RefLibs/src/FilteringFunctions/fir_sparse.c:  uint16_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter  */
DSP/DSP_Lib_TestSuite/RefLibs/src/FilteringFunctions/fir_sparse.c:  uint16_t numTaps = S->numTaps;                 /* Filter order */
DSP/DSP_Lib_TestSuite/RefLibs/src/FilteringFunctions/fir_sparse.c:  uint16_t numTaps = S->numTaps;                 /* Filter order */
DSP/DSP_Lib_TestSuite/RefLibs/src/FilteringFunctions/fir_sparse.c:  uint16_t numTaps = S->numTaps;                 /* Filter order */
DSP/DSP_Lib_TestSuite/RefLibs/src/FilteringFunctions/fir_interpolate.c:  uint16_t phaseLen = S->phaseLength, tapCnt;    /* Length of each polyphase filter component */
DSP/DSP_Lib_TestSuite/RefLibs/src/FilteringFunctions/fir_interpolate.c:  uint16_t phaseLen = S->phaseLength, tapCnt;    /* Length of each polyphase filter component */
DSP/DSP_Lib_TestSuite/RefLibs/src/FilteringFunctions/fir_interpolate.c:  uint16_t phaseLen = S->phaseLength;            /* Length of each polyphase filter component */
DSP/DSP_Lib_TestSuite/RefLibs/inc/ref.h://  typedef int16_t q15_t;
DSP/DSP_Lib_TestSuite/Common/src/matrix_tests/mat_init_tests.c:        const uint16_t rows = 4;                            \
DSP/DSP_Lib_TestSuite/Common/src/matrix_tests/mat_init_tests.c:        const uint16_t cols = 2;                            \
DSP/DSP_Lib_TestSuite/Common/src/transform_tests/transform_tests_common_data.c:ARR_DESC_DEFINE(uint16_t,
DSP/DSP_Lib_TestSuite/Common/src/transform_tests/transform_tests_common_data.c:ARR_DESC_DEFINE(uint16_t,
DSP/DSP_Lib_TestSuite/Common/src/transform_tests/transform_tests_common_data.c:ARR_DESC_DEFINE(uint16_t,
DSP/DSP_Lib_TestSuite/Common/src/transform_tests/transform_tests_common_data.c:ARR_DESC_DEFINE(uint16_t,
DSP/DSP_Lib_TestSuite/Common/src/transform_tests/transform_tests_common_data.c:ARR_DESC_DEFINE(uint16_t,
DSP/DSP_Lib_TestSuite/Common/src/transform_tests/dct4_tests.c:            fftlen_idx, uint16_t, fftlen, transform_dct_fftlens         \
DSP/DSP_Lib_TestSuite/Common/src/transform_tests/dct4_tests.c:            fftlen_idx, uint16_t, fftlen, transform_dct_fftlens            \
DSP/DSP_Lib_TestSuite/Common/src/transform_tests/cfft_family_tests.c:            fftlen_idx, uint16_t, fftlen, transform_##fn_specifier##_fftlens \
DSP/DSP_Lib_TestSuite/Common/src/transform_tests/rfft_fast_tests.c:            fftlen_idx, uint16_t, fftlen, transform_rfft_fast_fftlens   \
DSP/DSP_Lib_TestSuite/Common/src/transform_tests/rfft_tests.c:            fftlen_idx, uint16_t, fftlen, transform_rfft_fftlens        \
DSP/DSP_Lib_TestSuite/Common/src/filtering_tests/biquad_tests.c:               numstages_idx, uint16_t, numStages, filtering_numstages           \
DSP/DSP_Lib_TestSuite/Common/src/filtering_tests/biquad_tests.c:               numstages_idx, uint16_t, numStages, filtering_numstages                 \
DSP/DSP_Lib_TestSuite/Common/src/filtering_tests/biquad_tests.c:            numstages_idx, uint16_t, numStages, filtering_numstages
DSP/DSP_Lib_TestSuite/Common/src/filtering_tests/biquad_tests.c:           numstages_idx, uint16_t, numStages, filtering_numstages
DSP/DSP_Lib_TestSuite/Common/src/filtering_tests/iir_tests.c:               numstages_idx, uint16_t, numStages, filtering_numstages                    \
DSP/DSP_Lib_TestSuite/Common/src/filtering_tests/fir_tests.c:               numtaps_idx, uint16_t, numTaps, filtering_numtaps        \
DSP/DSP_Lib_TestSuite/Common/src/filtering_tests/fir_tests.c:               numtaps_idx, uint16_t, numTaps, filtering_numtaps2             \
DSP/DSP_Lib_TestSuite/Common/src/filtering_tests/fir_tests.c:               numtaps_idx, uint16_t, numTaps, filtering_numtaps           \
DSP/DSP_Lib_TestSuite/Common/src/filtering_tests/fir_tests.c:               numstages_idx, uint16_t, numStages, filtering_numstages     \
DSP/DSP_Lib_TestSuite/Common/src/filtering_tests/fir_tests.c:               numtaps_idx, uint16_t, numTaps, filtering_numtaps        \
DSP/DSP_Lib_TestSuite/Common/src/filtering_tests/fir_tests.c:               numtaps_idx, uint16_t, numTaps, filtering_numtaps        \
DSP/DSP_Lib_TestSuite/Common/src/filtering_tests/lms_tests.c:               numtaps_idx, uint16_t, numTaps, filtering_numtaps                       \
DSP/DSP_Lib_TestSuite/Common/src/filtering_tests/lms_tests.c:               numtaps_idx, uint16_t, numTaps, filtering_numtaps                       \
DSP/DSP_Lib_TestSuite/Common/src/filtering_tests/filtering_test_common_data.c:ARR_DESC_DEFINE(uint16_t,
DSP/DSP_Lib_TestSuite/Common/src/filtering_tests/filtering_test_common_data.c:ARR_DESC_DEFINE(uint16_t,
DSP/DSP_Lib_TestSuite/Common/src/filtering_tests/filtering_test_common_data.c:ARR_DESC_DEFINE(uint16_t,
Binary file Lib/ARM/arm_cortexM4b_math.lib matches
Binary file Lib/ARM/arm_ARMv8MMLld_math.lib matches
Binary file Lib/ARM/arm_cortexM0l_math.lib matches
Binary file Lib/ARM/arm_cortexM7lfdp_math.lib matches
Binary file Lib/ARM/arm_ARMv8MBLl_math.lib matches
Binary file Lib/ARM/arm_cortexM3l_math.lib matches
Binary file Lib/ARM/arm_cortexM3b_math.lib matches
Binary file Lib/ARM/arm_ARMv8MMLldfsp_math.lib matches
Binary file Lib/ARM/arm_cortexM4bf_math.lib matches
Binary file Lib/ARM/arm_ARMv8MMLlfsp_math.lib matches
Binary file Lib/ARM/arm_cortexM4lf_math.lib matches
Binary file Lib/ARM/arm_ARMv8MMLl_math.lib matches
Binary file Lib/ARM/arm_cortexM7lfsp_math.lib matches
Binary file Lib/ARM/arm_cortexM7b_math.lib matches
Binary file Lib/ARM/arm_cortexM7bfsp_math.lib matches
Binary file Lib/ARM/arm_cortexM4l_math.lib matches
Binary file Lib/ARM/arm_cortexM7l_math.lib matches
Binary file Lib/ARM/arm_cortexM0b_math.lib matches
Binary file Lib/ARM/arm_cortexM7bfdp_math.lib matches
Binary file Lib/GCC/libarm_cortexM3l_math.a matches
Binary file Lib/GCC/libarm_cortexM4l_math.a matches
Binary file Lib/GCC/libarm_ARMv8MMLl_math.a matches
Binary file Lib/GCC/libarm_ARMv8MMLld_math.a matches
Binary file Lib/GCC/libarm_cortexM0l_math.a matches
Binary file Lib/GCC/libarm_ARMv8MBLl_math.a matches
Binary file Lib/GCC/libarm_cortexM7lfdp_math.a matches
Binary file Lib/GCC/libarm_ARMv8MMLldfsp_math.a matches
Binary file Lib/GCC/libarm_cortexM4lf_math.a matches
Binary file Lib/GCC/libarm_ARMv8MMLlfsp_math.a matches
Binary file Lib/GCC/libarm_cortexM7lfsp_math.a matches
Binary file Lib/GCC/libarm_cortexM7l_math.a matches
NN/Include/arm_nnfunctions.h:                                         const uint16_t dim_im_in,
NN/Include/arm_nnfunctions.h:                                         const uint16_t ch_im_in,
NN/Include/arm_nnfunctions.h:                                         const uint16_t ch_im_out,
NN/Include/arm_nnfunctions.h:                                         const uint16_t dim_kernel,
NN/Include/arm_nnfunctions.h:                                         const uint16_t padding,
NN/Include/arm_nnfunctions.h:                                         const uint16_t stride,
NN/Include/arm_nnfunctions.h:                                         const uint16_t bias_shift,
NN/Include/arm_nnfunctions.h:                                         const uint16_t out_shift,
NN/Include/arm_nnfunctions.h:                                         const uint16_t dim_im_out, 
NN/Include/arm_nnfunctions.h:                                          const uint16_t dim_im_in,
NN/Include/arm_nnfunctions.h:                                          const uint16_t ch_im_in,
NN/Include/arm_nnfunctions.h:                                          const uint16_t ch_im_out,
NN/Include/arm_nnfunctions.h:                                          const uint16_t dim_kernel,
NN/Include/arm_nnfunctions.h:                                          const uint16_t padding,
NN/Include/arm_nnfunctions.h:                                          const uint16_t stride,
NN/Include/arm_nnfunctions.h:                                          const uint16_t bias_shift,
NN/Include/arm_nnfunctions.h:                                          const uint16_t out_shift,
NN/Include/arm_nnfunctions.h:                                          const uint16_t dim_im_out, 
NN/Include/arm_nnfunctions.h:                                        const uint16_t dim_im_in,
NN/Include/arm_nnfunctions.h:                                        const uint16_t ch_im_in,
NN/Include/arm_nnfunctions.h:                                        const uint16_t ch_im_out,
NN/Include/arm_nnfunctions.h:                                        const uint16_t dim_kernel,
NN/Include/arm_nnfunctions.h:                                        const uint16_t padding,
NN/Include/arm_nnfunctions.h:                                        const uint16_t stride,
NN/Include/arm_nnfunctions.h:                                        const uint16_t bias_shift,
NN/Include/arm_nnfunctions.h:                                        const uint16_t out_shift,
NN/Include/arm_nnfunctions.h:                                        const uint16_t dim_im_out, 
NN/Include/arm_nnfunctions.h:                                                  const uint16_t dim_im_in_x,
NN/Include/arm_nnfunctions.h:                                                  const uint16_t dim_im_in_y,
NN/Include/arm_nnfunctions.h:                                                  const uint16_t ch_im_in,
NN/Include/arm_nnfunctions.h:                                                  const uint16_t ch_im_out,
NN/Include/arm_nnfunctions.h:                                                  const uint16_t dim_kernel_x,
NN/Include/arm_nnfunctions.h:                                                  const uint16_t dim_kernel_y,
NN/Include/arm_nnfunctions.h:                                                  const uint16_t padding_x,
NN/Include/arm_nnfunctions.h:                                                  const uint16_t padding_y,
NN/Include/arm_nnfunctions.h:                                                  const uint16_t stride_x,
NN/Include/arm_nnfunctions.h:                                                  const uint16_t stride_y,
NN/Include/arm_nnfunctions.h:                                                  const uint16_t bias_shift,
NN/Include/arm_nnfunctions.h:                                                  const uint16_t out_shift,
NN/Include/arm_nnfunctions.h:                                                  const uint16_t dim_im_out_x,
NN/Include/arm_nnfunctions.h:                                                  const uint16_t dim_im_out_y,
NN/Include/arm_nnfunctions.h:                                                      const uint16_t dim_im_in_x,
NN/Include/arm_nnfunctions.h:                                                      const uint16_t dim_im_in_y,
NN/Include/arm_nnfunctions.h:                                                      const uint16_t ch_im_in,
NN/Include/arm_nnfunctions.h:                                                      const uint16_t ch_im_out,
NN/Include/arm_nnfunctions.h:                                                      const uint16_t dim_kernel_x,
NN/Include/arm_nnfunctions.h:                                                      const uint16_t dim_kernel_y,
NN/Include/arm_nnfunctions.h:                                                      const uint16_t padding_x,
NN/Include/arm_nnfunctions.h:                                                      const uint16_t padding_y,
NN/Include/arm_nnfunctions.h:                                                      const uint16_t stride_x,
NN/Include/arm_nnfunctions.h:                                                      const uint16_t stride_y,
NN/Include/arm_nnfunctions.h:                                                      const uint16_t bias_shift,
NN/Include/arm_nnfunctions.h:                                                      const uint16_t out_shift,
NN/Include/arm_nnfunctions.h:                                                      const uint16_t dim_im_out_x,
NN/Include/arm_nnfunctions.h:                                                      const uint16_t dim_im_out_y,
NN/Include/arm_nnfunctions.h:                                       const uint16_t dim_im_in,
NN/Include/arm_nnfunctions.h:                                       const uint16_t ch_im_in,
NN/Include/arm_nnfunctions.h:                                       const uint16_t ch_im_out,
NN/Include/arm_nnfunctions.h:                                       const uint16_t dim_kernel,
NN/Include/arm_nnfunctions.h:                                       const uint16_t padding,
NN/Include/arm_nnfunctions.h:                                       const uint16_t stride,
NN/Include/arm_nnfunctions.h:                                       const uint16_t bias_shift,
NN/Include/arm_nnfunctions.h:                                       const uint16_t out_shift,
NN/Include/arm_nnfunctions.h:                                       const uint16_t dim_im_out, 
NN/Include/arm_nnfunctions.h:                                         const uint16_t dim_im_in,
NN/Include/arm_nnfunctions.h:                                         const uint16_t ch_im_in,
NN/Include/arm_nnfunctions.h:                                         const uint16_t ch_im_out,
NN/Include/arm_nnfunctions.h:                                         const uint16_t dim_kernel,
NN/Include/arm_nnfunctions.h:                                         const uint16_t padding,
NN/Include/arm_nnfunctions.h:                                         const uint16_t stride,
NN/Include/arm_nnfunctions.h:                                         const uint16_t bias_shift,
NN/Include/arm_nnfunctions.h:                                         const uint16_t out_shift,
NN/Include/arm_nnfunctions.h:                                         const uint16_t dim_im_out, 
NN/Include/arm_nnfunctions.h:                                                   const uint16_t dim_im_in,
NN/Include/arm_nnfunctions.h:                                                   const uint16_t ch_im_in,
NN/Include/arm_nnfunctions.h:                                                   const uint16_t ch_im_out,
NN/Include/arm_nnfunctions.h:                                                   const uint16_t dim_kernel,
NN/Include/arm_nnfunctions.h:                                                   const uint16_t padding,
NN/Include/arm_nnfunctions.h:                                                   const uint16_t stride,
NN/Include/arm_nnfunctions.h:                                                   const uint16_t bias_shift,
NN/Include/arm_nnfunctions.h:                                                   const uint16_t out_shift,
NN/Include/arm_nnfunctions.h:                                                   const uint16_t dim_im_out, 
NN/Include/arm_nnfunctions.h:                                                             const uint16_t dim_im_in_x,
NN/Include/arm_nnfunctions.h:                                                             const uint16_t dim_im_in_y,
NN/Include/arm_nnfunctions.h:                                                             const uint16_t ch_im_in,
NN/Include/arm_nnfunctions.h:                                                             const uint16_t ch_im_out,
NN/Include/arm_nnfunctions.h:                                                             const uint16_t dim_kernel_x,
NN/Include/arm_nnfunctions.h:                                                             const uint16_t dim_kernel_y,
NN/Include/arm_nnfunctions.h:                                                             const uint16_t padding_x,
NN/Include/arm_nnfunctions.h:                                                             const uint16_t padding_y,
NN/Include/arm_nnfunctions.h:                                                             const uint16_t stride_x,
NN/Include/arm_nnfunctions.h:                                                             const uint16_t stride_y,
NN/Include/arm_nnfunctions.h:                                                             const uint16_t bias_shift,
NN/Include/arm_nnfunctions.h:                                                             const uint16_t out_shift,
NN/Include/arm_nnfunctions.h:                                                             const uint16_t dim_im_out_x,
NN/Include/arm_nnfunctions.h:                                                             const uint16_t dim_im_out_y,
NN/Include/arm_nnfunctions.h:                                      const uint16_t dim_vec,
NN/Include/arm_nnfunctions.h:                                      const uint16_t num_of_rows,
NN/Include/arm_nnfunctions.h:                                      const uint16_t bias_shift,
NN/Include/arm_nnfunctions.h:                                      const uint16_t out_shift, 
NN/Include/arm_nnfunctions.h:                                          const uint16_t dim_vec,
NN/Include/arm_nnfunctions.h:                                          const uint16_t num_of_rows,
NN/Include/arm_nnfunctions.h:                                          const uint16_t bias_shift,
NN/Include/arm_nnfunctions.h:                                          const uint16_t out_shift, 
NN/Include/arm_nnfunctions.h:                                       const uint16_t dim_vec,
NN/Include/arm_nnfunctions.h:                                       const uint16_t num_of_rows,
NN/Include/arm_nnfunctions.h:                                       const uint16_t bias_shift,
NN/Include/arm_nnfunctions.h:                                       const uint16_t out_shift, 
NN/Include/arm_nnfunctions.h:                                           const uint16_t dim_vec,
NN/Include/arm_nnfunctions.h:                                           const uint16_t num_of_rows,
NN/Include/arm_nnfunctions.h:                                           const uint16_t bias_shift,
NN/Include/arm_nnfunctions.h:                                           const uint16_t out_shift,
NN/Include/arm_nnfunctions.h:                                                  const uint16_t dim_vec,
NN/Include/arm_nnfunctions.h:                                                  const uint16_t num_of_rows,
NN/Include/arm_nnfunctions.h:                                                  const uint16_t bias_shift,
NN/Include/arm_nnfunctions.h:                                                  const uint16_t out_shift,
NN/Include/arm_nnfunctions.h:                                                      const uint16_t dim_vec,
NN/Include/arm_nnfunctions.h:                                                      const uint16_t num_of_rows,
NN/Include/arm_nnfunctions.h:                                                      const uint16_t bias_shift,
NN/Include/arm_nnfunctions.h:                                                      const uint16_t out_shift,
NN/Include/arm_nnfunctions.h:                                            const uint16_t ch_im_out,
NN/Include/arm_nnfunctions.h:                                            const uint16_t numCol_A,
NN/Include/arm_nnfunctions.h:                                            const uint16_t bias_shift,
NN/Include/arm_nnfunctions.h:                                            const uint16_t out_shift, 
NN/Include/arm_nnfunctions.h:                                                      const uint16_t ch_im_out,
NN/Include/arm_nnfunctions.h:                                                      const uint16_t numCol_A,
NN/Include/arm_nnfunctions.h:                                                      const uint16_t bias_shift,
NN/Include/arm_nnfunctions.h:                                                      const uint16_t out_shift, 
NN/Include/arm_nnfunctions.h:    void      arm_relu_q7(q7_t * data, uint16_t size);
NN/Include/arm_nnfunctions.h:    void      arm_relu_q15(q15_t * data, uint16_t size);
NN/Include/arm_nnfunctions.h:    void      arm_nn_activations_direct_q7(q7_t * data, uint16_t size, uint16_t int_width, 
NN/Include/arm_nnfunctions.h:    void      arm_nn_activations_direct_q15(q15_t * data, uint16_t size, uint16_t int_width,
NN/Include/arm_nnfunctions.h:                                 const uint16_t dim_im_in,
NN/Include/arm_nnfunctions.h:                                 const uint16_t ch_im_in,
NN/Include/arm_nnfunctions.h:                                 const uint16_t dim_kernel,
NN/Include/arm_nnfunctions.h:                                 const uint16_t padding,
NN/Include/arm_nnfunctions.h:                                 const uint16_t stride, 
NN/Include/arm_nnfunctions.h:                                 const uint16_t dim_im_out, 
NN/Include/arm_nnfunctions.h:                                 const uint16_t dim_im_in,
NN/Include/arm_nnfunctions.h:                                 const uint16_t ch_im_in,
NN/Include/arm_nnfunctions.h:                                 const uint16_t dim_kernel,
NN/Include/arm_nnfunctions.h:                                 const uint16_t padding,
NN/Include/arm_nnfunctions.h:                                 const uint16_t stride, 
NN/Include/arm_nnfunctions.h:                                 const uint16_t dim_im_out, 
NN/Include/arm_nnfunctions.h:    void      arm_softmax_q7(const q7_t * vec_in, const uint16_t dim_vec, q7_t * p_out);
NN/Include/arm_nnfunctions.h:    void      arm_softmax_q15(const q15_t * vec_in, const uint16_t dim_vec, q15_t * p_out);
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_relu_ref.c:void arm_relu_q7_ref(q7_t * data, uint16_t size)
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_relu_ref.c:    uint16_t  i;
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_relu_ref.c:void arm_relu_q15_ref(q15_t * data, uint16_t size)
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_relu_ref.c:    uint16_t  i;
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_depthwise_separable_conv_HWC_q7_ref.c:                                             const uint16_t dim_im_in,  // input image dimention
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_depthwise_separable_conv_HWC_q7_ref.c:                                             const uint16_t ch_im_in,   // number of input image channels
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_depthwise_separable_conv_HWC_q7_ref.c:                                             const uint16_t ch_im_out,  // number of filters, i.e., output image channels
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_depthwise_separable_conv_HWC_q7_ref.c:                                             const uint16_t dim_kernel, // filter kernel size
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_depthwise_separable_conv_HWC_q7_ref.c:                                             const uint16_t padding,    // padding sizes
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_depthwise_separable_conv_HWC_q7_ref.c:                                             const uint16_t stride, // stride
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_depthwise_separable_conv_HWC_q7_ref.c:                                             const uint16_t bias_shift, // amount of left-shift for bias
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_depthwise_separable_conv_HWC_q7_ref.c:                                             const uint16_t out_shift,  // amount of right-shift for output
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_depthwise_separable_conv_HWC_q7_ref.c:                                             const uint16_t dim_im_out, // output image dimension
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_pool_ref.c:                            const uint16_t dim_im_in,   // input image dimension
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_pool_ref.c:                            const uint16_t ch_im_in,    // number of input image channels
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_pool_ref.c:                            const uint16_t dim_kernel,  // window kernel size
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_pool_ref.c:                            const uint16_t padding, // padding sizes
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_pool_ref.c:                            const uint16_t stride,  // stride
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_pool_ref.c:                            const uint16_t dim_im_out,  // output image dimension
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_pool_ref.c:    int16_t   i_ch_in, i_x, i_y;
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_pool_ref.c:    int16_t   k_x, k_y;
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_pool_ref.c:                            const uint16_t dim_im_in,   // input image dimension
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_pool_ref.c:                            const uint16_t ch_im_in,    // number of input image channels
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_pool_ref.c:                            const uint16_t dim_kernel,  // window kernel size
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_pool_ref.c:                            const uint16_t padding, // padding sizes
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_pool_ref.c:                            const uint16_t stride,  // stride
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_pool_ref.c:                            const uint16_t dim_im_out,  // output image dimension
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_pool_ref.c:    int16_t   i_ch_in, i_x, i_y;
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_pool_ref.c:    int16_t   k_x, k_y;
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_fully_connected_q7_opt_ref.c:                                    const uint16_t dim_vec, // length of the vector
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_fully_connected_q7_opt_ref.c:                                    const uint16_t num_of_rows, // numCol of A
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_fully_connected_q7_opt_ref.c:                                    const uint16_t bias_shift,  // amount of left-shift for bias
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_fully_connected_q7_opt_ref.c:                                    const uint16_t out_shift,   // amount of right-shift for output
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_fully_connected_q7_opt_ref.c:    uint16_t  rowCnt = num_of_rows >> 2;
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_fully_connected_q7_opt_ref.c:        uint16_t  colCnt = dim_vec >> 2;
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_fully_connected_mat_q7_vec_q15_opt_ref.c:                                                const uint16_t dim_vec, // length of the vector
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_fully_connected_mat_q7_vec_q15_opt_ref.c:                                                const uint16_t num_of_rows, // numCol of A
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_fully_connected_mat_q7_vec_q15_opt_ref.c:                                                const uint16_t bias_shift,  // amount of left-shift for bias
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_fully_connected_mat_q7_vec_q15_opt_ref.c:                                                const uint16_t out_shift,   // amount of right-shift for output
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_fully_connected_mat_q7_vec_q15_opt_ref.c:    uint16_t  rowCnt = num_of_rows >> 2;
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_fully_connected_mat_q7_vec_q15_opt_ref.c:        uint16_t  colCnt = dim_vec >> 1;
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_depthwise_separable_conv_HWC_q7_ref_nonsquare.c:                                                       const uint16_t dim_im_in_x,  // input image dimention x
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_depthwise_separable_conv_HWC_q7_ref_nonsquare.c:                                                       const uint16_t dim_im_in_y,  // input image dimention y
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_depthwise_separable_conv_HWC_q7_ref_nonsquare.c:                                                       const uint16_t ch_im_in, // number of input image channels
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_depthwise_separable_conv_HWC_q7_ref_nonsquare.c:                                                       const uint16_t ch_im_out,    // number of filters, i.e., output image channels
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_depthwise_separable_conv_HWC_q7_ref_nonsquare.c:                                                       const uint16_t dim_kernel_x, // filter kernel size x
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_depthwise_separable_conv_HWC_q7_ref_nonsquare.c:                                                       const uint16_t dim_kernel_y, // filter kernel size y
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_depthwise_separable_conv_HWC_q7_ref_nonsquare.c:                                                       const uint16_t padding_x,    // padding sizes x
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_depthwise_separable_conv_HWC_q7_ref_nonsquare.c:                                                       const uint16_t padding_y,    // padding sizes y
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_depthwise_separable_conv_HWC_q7_ref_nonsquare.c:                                                       const uint16_t stride_x, // stride x
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_depthwise_separable_conv_HWC_q7_ref_nonsquare.c:                                                       const uint16_t stride_y, // stride y
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_depthwise_separable_conv_HWC_q7_ref_nonsquare.c:                                                       const uint16_t bias_shift,   // amount of left-shift for bias
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_depthwise_separable_conv_HWC_q7_ref_nonsquare.c:                                                       const uint16_t out_shift,    // amount of right-shift for output
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_depthwise_separable_conv_HWC_q7_ref_nonsquare.c:                                                       const uint16_t dim_im_out_x, // output image dimension x
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_depthwise_separable_conv_HWC_q7_ref_nonsquare.c:                                                       const uint16_t dim_im_out_y, // output image dimension y
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_fully_connected_q15_ref.c:                                 const uint16_t dim_vec,    // length of the vector
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_fully_connected_q15_ref.c:                                 const uint16_t num_of_rows,    // numCol of A
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_fully_connected_q15_ref.c:                                 const uint16_t bias_shift, // amount of left-shift for bias
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_fully_connected_q15_ref.c:                                 const uint16_t out_shift,  // amount of right-shift for output
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                      const uint16_t dim_im_in, // input image dimention
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                      const uint16_t ch_im_in,  // number of input image channels
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                      const uint16_t ch_im_out, // number of filters, i.e., output image channels
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                      const uint16_t dim_kernel,    // filter kernel size
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                      const uint16_t padding,   // padding sizes
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                      const uint16_t stride,    // stride
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                      const uint16_t bias_shift, const uint16_t out_shift, q7_t * Im_out,   // output image
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                      const uint16_t dim_im_out,    // output image dimension
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                const uint16_t dim_im_in_x, // input image dimention x
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                const uint16_t dim_im_in_y, // input image dimention y
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                const uint16_t ch_im_in,    // number of input image channels
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                const uint16_t ch_im_out,   // number of filters, i.e., output image channels
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                const uint16_t dim_kernel_x,    // filter kernel size x
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                const uint16_t dim_kernel_y,    // filter kernel size y
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                const uint16_t padding_x,   // padding sizes x
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                const uint16_t padding_y,   // padding sizes y
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                const uint16_t stride_x,    // stride x
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                const uint16_t stride_y,    // stride y
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                const uint16_t bias_shift, const uint16_t out_shift, q7_t * Im_out, // output image
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                const uint16_t dim_im_out_x,    // output image dimension x
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                const uint16_t dim_im_out_y,    // output image dimension y
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                       const uint16_t dim_im_in,    // input image dimention
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                       const uint16_t ch_im_in, // number of input image channels
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                       const uint16_t ch_im_out,    // number of filters, i.e., output image channels
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                       const uint16_t dim_kernel,   // filter kernel size
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                       const uint16_t padding,  // padding sizes
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                       const uint16_t stride,   // stride
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                       const uint16_t bias_shift, const uint16_t out_shift, q15_t * Im_out, // output image
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                       const uint16_t dim_im_out,   // output image dimension
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                      const uint16_t dim_im_in, // input image dimention
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                      const uint16_t ch_im_in,  // number of input image channels
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                      const uint16_t ch_im_out, // number of filters, i.e., output image channels
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                      const uint16_t dim_kernel,    // filter kernel size
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                      const uint16_t padding,   // padding sizes
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                      const uint16_t stride,    // stride
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                      const uint16_t bias_shift,    // amount of left-shift for bias
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                      const uint16_t out_shift, // amount of right-shift for output
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                      const uint16_t dim_im_out,    // output image dimension
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                                const uint16_t dim_im_in_x, // input image dimention x
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                                const uint16_t dim_im_in_y, // input image dimention y
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                                const uint16_t ch_im_in,    // number of input image channels
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                                const uint16_t ch_im_out,   // number of filters, i.e., output image channels
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                                const uint16_t dim_kernel_x,    // filter kernel size x
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                                const uint16_t dim_kernel_y,    // filter kernel size y
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                                const uint16_t padding_x,   // padding sizes x
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                                const uint16_t padding_y,   // padding sizes y
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                                const uint16_t stride_x,    // stride x
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                                const uint16_t stride_y,    // stride y
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                                const uint16_t bias_shift,  // amount of left-shift for bias
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                                const uint16_t out_shift,   // amount of right-shift for output
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                                const uint16_t dim_im_out_x,    // output image dimension x
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                                const uint16_t dim_im_out_y,    // output image dimension y
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                         const uint16_t dim_vec,    // length of the vector
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                         const uint16_t num_of_rows,    // numCol of A
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                         const uint16_t bias_shift, // amount of left-shift for bias
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                         const uint16_t out_shift,  // amount of right-shift for output
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                          const uint16_t dim_vec,   // length of the vector
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                          const uint16_t num_of_rows,   // numCol of A
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                          const uint16_t bias_shift,    // amount of left-shift for bias
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                          const uint16_t out_shift, // amount of right-shift for output
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                     const uint16_t dim_vec,    // length of the vector
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                     const uint16_t num_of_rows,    // numCol of A
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                     const uint16_t bias_shift, // amount of left-shift for bias
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                     const uint16_t out_shift,  // amount of right-shift for output
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                             const uint16_t dim_vec,    // length of the vector
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                             const uint16_t num_of_rows,    // numCol of A
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                             const uint16_t bias_shift, // amount of left-shift for bias
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                             const uint16_t out_shift,  // amount of right-shift for output
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                              const uint16_t dim_vec,   // length of the vector
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                              const uint16_t num_of_rows,   // numCol of A
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                              const uint16_t bias_shift,    // amount of left-shift for bias
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                              const uint16_t out_shift, // amount of right-shift for output
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                         const uint16_t dim_vec,    // length of the vector
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                         const uint16_t num_of_rows,    // numCol of A
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                         const uint16_t bias_shift, // amount of left-shift for bias
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                                         const uint16_t out_shift,  // amount of right-shift for output
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                     const uint16_t dim_im_in,  // input image dimension
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                     const uint16_t ch_im_in,   // number of input image channels
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                     const uint16_t dim_kernel, // window kernel size
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                     const uint16_t padding,    // padding sizes
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                     const uint16_t stride, // stride
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                     const uint16_t dim_im_out, // output image dimension
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                     const uint16_t dim_im_in,  // input image dimension
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                     const uint16_t ch_im_in,   // number of input image channels
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                     const uint16_t dim_kernel, // window kernel size
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                     const uint16_t padding,    // padding sizes
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                     const uint16_t stride, // stride
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:                                     const uint16_t dim_im_out, // output image dimension
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:    void      arm_relu_q7_ref(q7_t * data, uint16_t size);
NN/NN_Lib_Tests/nn_test/Ref_Implementations/ref_functions.h:    void      arm_relu_q15_ref(q15_t * data, uint16_t size);
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_fully_connected_q7_ref.c:                                const uint16_t dim_vec, // length of the vector
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_fully_connected_q7_ref.c:                                const uint16_t num_of_rows, // numCol of A
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_fully_connected_q7_ref.c:                                const uint16_t bias_shift,  // amount of left-shift for bias
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_fully_connected_q7_ref.c:                                const uint16_t out_shift,   // amount of right-shift for output
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_fully_connected_mat_q7_vec_q15_ref.c:                                            const uint16_t dim_vec, // length of the vector
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_fully_connected_mat_q7_vec_q15_ref.c:                                            const uint16_t num_of_rows, // numCol of A
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_fully_connected_mat_q7_vec_q15_ref.c:                                            const uint16_t bias_shift,  // amount of left-shift for bias
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_fully_connected_mat_q7_vec_q15_ref.c:                                            const uint16_t out_shift,   // amount of right-shift for output
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_fully_connected_q15_opt_ref.c:                                     const uint16_t dim_vec,    // length of the vector
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_fully_connected_q15_opt_ref.c:                                     const uint16_t num_of_rows,    // numCol of A
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_fully_connected_q15_opt_ref.c:                                     const uint16_t bias_shift, // amount of left-shift for bias
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_fully_connected_q15_opt_ref.c:                                     const uint16_t out_shift,  // amount of right-shift for output
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_fully_connected_q15_opt_ref.c:    uint16_t  rowCnt = num_of_rows >> 2;
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_fully_connected_q15_opt_ref.c:        uint16_t  colCnt = dim_vec >> 1;
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_convolve_HWC_q15_ref.c:                              const uint16_t dim_im_in, // input image dimention
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_convolve_HWC_q15_ref.c:                              const uint16_t ch_im_in,  // number of input image channels
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_convolve_HWC_q15_ref.c:                              const uint16_t ch_im_out, // number of filters, i.e., output image channels
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_convolve_HWC_q15_ref.c:                              const uint16_t dim_kernel,    // filter kernel size
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_convolve_HWC_q15_ref.c:                              const uint16_t padding,   // padding sizes
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_convolve_HWC_q15_ref.c:                              const uint16_t stride,    // stride
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_convolve_HWC_q15_ref.c:                              const uint16_t bias_shift, const uint16_t out_shift, q15_t * Im_out,  // output image
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_convolve_HWC_q15_ref.c:                              const uint16_t dim_im_out,    // output image dimension
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_convolve_HWC_q7_ref.c:                             const uint16_t dim_im_in,  // input image dimention
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_convolve_HWC_q7_ref.c:                             const uint16_t ch_im_in,   // number of input image channels
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_convolve_HWC_q7_ref.c:                             const uint16_t ch_im_out,  // number of filters, i.e., output image channels
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_convolve_HWC_q7_ref.c:                             const uint16_t dim_kernel, // filter kernel size
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_convolve_HWC_q7_ref.c:                             const uint16_t padding,    // padding sizes
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_convolve_HWC_q7_ref.c:                             const uint16_t stride, // stride
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_convolve_HWC_q7_ref.c:                             const uint16_t bias_shift, const uint16_t out_shift, q7_t * Im_out,    // output image
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_convolve_HWC_q7_ref.c:                             const uint16_t dim_im_out, // output image dimension
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_convolve_HWC_q7_ref_nonsquare.c:                                       const uint16_t dim_im_in_x,  // input image dimention x
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_convolve_HWC_q7_ref_nonsquare.c:                                       const uint16_t dim_im_in_y,  // input image dimention y
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_convolve_HWC_q7_ref_nonsquare.c:                                       const uint16_t ch_im_in, // number of input image channels
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_convolve_HWC_q7_ref_nonsquare.c:                                       const uint16_t ch_im_out,    // number of filters, i.e., output image channels
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_convolve_HWC_q7_ref_nonsquare.c:                                       const uint16_t dim_kernel_x, // filter kernel size x
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_convolve_HWC_q7_ref_nonsquare.c:                                       const uint16_t dim_kernel_y, // filter kernel size y
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_convolve_HWC_q7_ref_nonsquare.c:                                       const uint16_t padding_x,    // padding sizes x
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_convolve_HWC_q7_ref_nonsquare.c:                                       const uint16_t padding_y,    // padding sizes y
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_convolve_HWC_q7_ref_nonsquare.c:                                       const uint16_t stride_x, // stride x
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_convolve_HWC_q7_ref_nonsquare.c:                                       const uint16_t stride_y, // stride y
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_convolve_HWC_q7_ref_nonsquare.c:                                       const uint16_t bias_shift, const uint16_t out_shift, q7_t * Im_out,  // output image
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_convolve_HWC_q7_ref_nonsquare.c:                                       const uint16_t dim_im_out_x, // output image dimension x
NN/NN_Lib_Tests/nn_test/Ref_Implementations/arm_convolve_HWC_q7_ref_nonsquare.c:                                       const uint16_t dim_im_out_y, // output image dimension y
NN/Source/PoolingFunctions/arm_pool_q7_HWC.c:static void buffer_scale_back_q15_to_q7(q15_t * buffer, q7_t * target, uint16_t length, uint16_t scale)
NN/Source/PoolingFunctions/arm_pool_q7_HWC.c:                                             const uint16_t length  // data length
NN/Source/PoolingFunctions/arm_pool_q7_HWC.c:    uint16_t  cnt = length >> 2;
NN/Source/PoolingFunctions/arm_pool_q7_HWC.c:static void accumulate_q7_to_q15(q15_t * base, q7_t * target, const uint16_t length)
NN/Source/PoolingFunctions/arm_pool_q7_HWC.c:    uint16_t  cnt = length >> 2;
NN/Source/PoolingFunctions/arm_pool_q7_HWC.c:                   const uint16_t dim_im_in,
NN/Source/PoolingFunctions/arm_pool_q7_HWC.c:                   const uint16_t ch_im_in,
NN/Source/PoolingFunctions/arm_pool_q7_HWC.c:                   const uint16_t dim_kernel,
NN/Source/PoolingFunctions/arm_pool_q7_HWC.c:                   const uint16_t padding,
NN/Source/PoolingFunctions/arm_pool_q7_HWC.c:                   const uint16_t stride, const uint16_t dim_im_out, q7_t * bufferA, q7_t * Im_out)
NN/Source/PoolingFunctions/arm_pool_q7_HWC.c:    int16_t   i_x, i_y;
NN/Source/PoolingFunctions/arm_pool_q7_HWC.c:    int16_t   i_ch_in, i_x, i_y;
NN/Source/PoolingFunctions/arm_pool_q7_HWC.c:    int16_t   k_x, k_y;
NN/Source/PoolingFunctions/arm_pool_q7_HWC.c:                   const uint16_t dim_im_in,
NN/Source/PoolingFunctions/arm_pool_q7_HWC.c:                   const uint16_t ch_im_in,
NN/Source/PoolingFunctions/arm_pool_q7_HWC.c:                   const uint16_t dim_kernel,
NN/Source/PoolingFunctions/arm_pool_q7_HWC.c:                   const uint16_t padding,
NN/Source/PoolingFunctions/arm_pool_q7_HWC.c:                   const uint16_t stride, const uint16_t dim_im_out, q7_t * bufferA, q7_t * Im_out)
NN/Source/PoolingFunctions/arm_pool_q7_HWC.c:    int16_t   i_x, i_y;
NN/Source/PoolingFunctions/arm_pool_q7_HWC.c:    int16_t   count = 0;
NN/Source/PoolingFunctions/arm_pool_q7_HWC.c:    int16_t   i_ch_in, i_x, i_y;
NN/Source/PoolingFunctions/arm_pool_q7_HWC.c:    int16_t   k_x, k_y;
NN/Source/ActivationFunctions/arm_relu_q15.c:void arm_relu_q15(q15_t * data, uint16_t size)
NN/Source/ActivationFunctions/arm_relu_q15.c:    uint16_t  i = size >> 1;
NN/Source/ActivationFunctions/arm_relu_q15.c:    uint16_t  i;
NN/Source/ActivationFunctions/arm_nn_activations_q7.c:void arm_nn_activations_direct_q7(q7_t * data, uint16_t size, uint16_t int_width, arm_nn_activation_type type)
NN/Source/ActivationFunctions/arm_nn_activations_q7.c:    uint16_t  i = size;
NN/Source/ActivationFunctions/arm_nn_activations_q7.c:    uint16_t  shift_size = 3 - int_width;
NN/Source/ActivationFunctions/arm_nn_activations_q15.c:void arm_nn_activations_direct_q15(q15_t * data, uint16_t size, uint16_t int_width, arm_nn_activation_type type)
NN/Source/ActivationFunctions/arm_nn_activations_q15.c:    uint16_t  i = size;
NN/Source/ActivationFunctions/arm_nn_activations_q15.c:    uint16_t  shift_size = 8 + 3 - int_width;
NN/Source/ActivationFunctions/arm_relu_q7.c:void arm_relu_q7(q7_t * data, uint16_t size)
NN/Source/ActivationFunctions/arm_relu_q7.c:    uint16_t  i = size >> 2;
NN/Source/ActivationFunctions/arm_relu_q7.c:    uint16_t  i;
NN/Source/FullyConnectedFunctions/arm_fully_connected_q15.c:                        const uint16_t dim_vec,
NN/Source/FullyConnectedFunctions/arm_fully_connected_q15.c:                        const uint16_t num_of_rows,
NN/Source/FullyConnectedFunctions/arm_fully_connected_q15.c:                        const uint16_t bias_shift,
NN/Source/FullyConnectedFunctions/arm_fully_connected_q15.c:                        const uint16_t out_shift, 
NN/Source/FullyConnectedFunctions/arm_fully_connected_q15.c:    uint16_t rowCnt = num_of_rows >> 1;
NN/Source/FullyConnectedFunctions/arm_fully_connected_q15.c:        uint16_t  colCnt = dim_vec >> 2;
NN/Source/FullyConnectedFunctions/arm_fully_connected_q15.c:        uint16_t  colCnt = dim_vec >> 2;
NN/Source/FullyConnectedFunctions/arm_fully_connected_q15_opt.c:                            const uint16_t dim_vec,
NN/Source/FullyConnectedFunctions/arm_fully_connected_q15_opt.c:                            const uint16_t num_of_rows,
NN/Source/FullyConnectedFunctions/arm_fully_connected_q15_opt.c:                            const uint16_t bias_shift,
NN/Source/FullyConnectedFunctions/arm_fully_connected_q15_opt.c:                            const uint16_t out_shift, 
NN/Source/FullyConnectedFunctions/arm_fully_connected_q15_opt.c:    uint16_t  rowCnt = num_of_rows >> 2;
NN/Source/FullyConnectedFunctions/arm_fully_connected_q15_opt.c:        uint16_t  colCnt = dim_vec >> 1;
NN/Source/FullyConnectedFunctions/arm_fully_connected_q15_opt.c:        uint16_t  colCnt = dim_vec >> 2;
NN/Source/FullyConnectedFunctions/arm_fully_connected_q15_opt.c:    uint16_t  rowCnt = num_of_rows >> 2;
NN/Source/FullyConnectedFunctions/arm_fully_connected_q15_opt.c:        uint16_t  colCnt = dim_vec >> 1;
NN/Source/FullyConnectedFunctions/arm_fully_connected_mat_q7_vec_q15.c:                                   const uint16_t dim_vec,
NN/Source/FullyConnectedFunctions/arm_fully_connected_mat_q7_vec_q15.c:                                   const uint16_t num_of_rows,
NN/Source/FullyConnectedFunctions/arm_fully_connected_mat_q7_vec_q15.c:                                   const uint16_t bias_shift,
NN/Source/FullyConnectedFunctions/arm_fully_connected_mat_q7_vec_q15.c:                                   const uint16_t out_shift, 
NN/Source/FullyConnectedFunctions/arm_fully_connected_mat_q7_vec_q15.c:    uint16_t  rowCnt = num_of_rows >> 1;
NN/Source/FullyConnectedFunctions/arm_fully_connected_mat_q7_vec_q15.c:        uint16_t  colCnt = dim_vec >> 2;
NN/Source/FullyConnectedFunctions/arm_fully_connected_mat_q7_vec_q15.c:        uint16_t  colCnt = dim_vec >> 2;
NN/Source/FullyConnectedFunctions/arm_fully_connected_q7.c:                       const uint16_t dim_vec,
NN/Source/FullyConnectedFunctions/arm_fully_connected_q7.c:                       const uint16_t num_of_rows,
NN/Source/FullyConnectedFunctions/arm_fully_connected_q7.c:                       const uint16_t bias_shift,
NN/Source/FullyConnectedFunctions/arm_fully_connected_q7.c:                       const uint16_t out_shift, const q7_t * bias, q7_t * pOut, q15_t * vec_buffer)
NN/Source/FullyConnectedFunctions/arm_fully_connected_q7.c:    uint16_t  rowCnt = num_of_rows >> 1;
NN/Source/FullyConnectedFunctions/arm_fully_connected_q7.c:        uint16_t  colCnt = dim_vec >> 2;
NN/Source/FullyConnectedFunctions/arm_fully_connected_q7.c:        uint16_t  colCnt = dim_vec >> 2;
NN/Source/FullyConnectedFunctions/arm_fully_connected_mat_q7_vec_q15_opt.c:                                       const uint16_t dim_vec,
NN/Source/FullyConnectedFunctions/arm_fully_connected_mat_q7_vec_q15_opt.c:                                       const uint16_t num_of_rows,
NN/Source/FullyConnectedFunctions/arm_fully_connected_mat_q7_vec_q15_opt.c:                                       const uint16_t bias_shift,
NN/Source/FullyConnectedFunctions/arm_fully_connected_mat_q7_vec_q15_opt.c:                                       const uint16_t out_shift, const q7_t * bias, q15_t * pOut, q15_t * vec_buffer)
NN/Source/FullyConnectedFunctions/arm_fully_connected_mat_q7_vec_q15_opt.c:    uint16_t  rowCnt = num_of_rows >> 2;
NN/Source/FullyConnectedFunctions/arm_fully_connected_mat_q7_vec_q15_opt.c:        uint16_t  colCnt = dim_vec >> 1;
NN/Source/FullyConnectedFunctions/arm_fully_connected_mat_q7_vec_q15_opt.c:        uint16_t  colCnt = dim_vec >> 2;
NN/Source/FullyConnectedFunctions/arm_fully_connected_mat_q7_vec_q15_opt.c:    uint16_t  rowCnt = num_of_rows >> 2;
NN/Source/FullyConnectedFunctions/arm_fully_connected_mat_q7_vec_q15_opt.c:        uint16_t  colCnt = dim_vec >> 1;
NN/Source/FullyConnectedFunctions/arm_fully_connected_q7_opt.c:                           const uint16_t dim_vec,
NN/Source/FullyConnectedFunctions/arm_fully_connected_q7_opt.c:                           const uint16_t num_of_rows,
NN/Source/FullyConnectedFunctions/arm_fully_connected_q7_opt.c:                           const uint16_t bias_shift,
NN/Source/FullyConnectedFunctions/arm_fully_connected_q7_opt.c:                           const uint16_t out_shift, 
NN/Source/FullyConnectedFunctions/arm_fully_connected_q7_opt.c:    uint16_t  rowCnt = num_of_rows >> 2;
NN/Source/FullyConnectedFunctions/arm_fully_connected_q7_opt.c:        uint16_t  colCnt = dim_vec >> 2;
NN/Source/FullyConnectedFunctions/arm_fully_connected_q7_opt.c:        uint16_t  colCnt = dim_vec >> 2;
NN/Source/FullyConnectedFunctions/arm_fully_connected_q7_opt.c:    uint16_t  rowCnt = num_of_rows >> 2;
NN/Source/FullyConnectedFunctions/arm_fully_connected_q7_opt.c:        uint16_t  colCnt = dim_vec >> 2;
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7.c:                                               const uint16_t dim_im_in,
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7.c:                                               const uint16_t ch_im_in,
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7.c:                                               const uint16_t ch_im_out,
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7.c:                                               const uint16_t dim_kernel,
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7.c:                                               const uint16_t padding,
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7.c:                                               const uint16_t stride,
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7.c:                                               const uint16_t bias_shift,
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7.c:                                               const uint16_t out_shift,
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7.c:                                               const uint16_t dim_im_out, 
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7.c:    int16_t   i_out_y, i_out_x;
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7.c:    int16_t   i_ker_y, i_ker_x;
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7.c:    uint16_t  rowCnt;
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7.c:    uint16_t  row_shift;
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7.c:                uint16_t  colCnt = (dim_kernel * dim_kernel) >> 1;
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7.c:                uint16_t  colCnt = (dim_kernel * dim_kernel);
NN/Source/ConvolutionFunctions/arm_convolve_1x1_HWC_q7_fast_nonsquare.c:                                                  const uint16_t dim_im_in_x,
NN/Source/ConvolutionFunctions/arm_convolve_1x1_HWC_q7_fast_nonsquare.c:                                                  const uint16_t dim_im_in_y,
NN/Source/ConvolutionFunctions/arm_convolve_1x1_HWC_q7_fast_nonsquare.c:                                                  const uint16_t ch_im_in,
NN/Source/ConvolutionFunctions/arm_convolve_1x1_HWC_q7_fast_nonsquare.c:                                                  const uint16_t ch_im_out,
NN/Source/ConvolutionFunctions/arm_convolve_1x1_HWC_q7_fast_nonsquare.c:                                                  const uint16_t dim_kernel_x,
NN/Source/ConvolutionFunctions/arm_convolve_1x1_HWC_q7_fast_nonsquare.c:                                                  const uint16_t dim_kernel_y,
NN/Source/ConvolutionFunctions/arm_convolve_1x1_HWC_q7_fast_nonsquare.c:                                                  const uint16_t padding_x,
NN/Source/ConvolutionFunctions/arm_convolve_1x1_HWC_q7_fast_nonsquare.c:                                                  const uint16_t padding_y,
NN/Source/ConvolutionFunctions/arm_convolve_1x1_HWC_q7_fast_nonsquare.c:                                                  const uint16_t stride_x,
NN/Source/ConvolutionFunctions/arm_convolve_1x1_HWC_q7_fast_nonsquare.c:                                                  const uint16_t stride_y,
NN/Source/ConvolutionFunctions/arm_convolve_1x1_HWC_q7_fast_nonsquare.c:                                                  const uint16_t bias_shift,
NN/Source/ConvolutionFunctions/arm_convolve_1x1_HWC_q7_fast_nonsquare.c:                                                  const uint16_t out_shift,
NN/Source/ConvolutionFunctions/arm_convolve_1x1_HWC_q7_fast_nonsquare.c:                                                  const uint16_t dim_im_out_x,
NN/Source/ConvolutionFunctions/arm_convolve_1x1_HWC_q7_fast_nonsquare.c:                                                  const uint16_t dim_im_out_y, 
NN/Source/ConvolutionFunctions/arm_convolve_1x1_HWC_q7_fast_nonsquare.c:    int16_t   i_out_y, i_out_x;
NN/Source/ConvolutionFunctions/arm_convolve_1x1_HWC_q7_fast_nonsquare.c:    int16_t   i_ch_out;
NN/Source/ConvolutionFunctions/arm_convolve_1x1_HWC_q7_fast_nonsquare.c:            uint16_t  colCnt = ch_im_in * dim_kernel_x * dim_kernel_y >> 2;
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c:                          const uint16_t dim_im_in,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c:                          const uint16_t ch_im_in,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c:                          const uint16_t ch_im_out,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c:                          const uint16_t dim_kernel,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c:                          const uint16_t padding,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c:                          const uint16_t stride,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c:                          const uint16_t bias_shift,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c:                          const uint16_t out_shift,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c:                          const uint16_t dim_im_out, 
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c:    int16_t   i_out_y, i_out_x, i_ker_y, i_ker_x;
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c:                    uint16_t  colCnt = ch_im_in * dim_kernel * dim_kernel >> 1;
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c:    uint16_t  i, j, k, l, m, n;
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_fast_nonsquare.c:                                              const uint16_t dim_im_in_x,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_fast_nonsquare.c:                                              const uint16_t dim_im_in_y,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_fast_nonsquare.c:                                              const uint16_t ch_im_in,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_fast_nonsquare.c:                                              const uint16_t ch_im_out,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_fast_nonsquare.c:                                              const uint16_t dim_kernel_x,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_fast_nonsquare.c:                                              const uint16_t dim_kernel_y,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_fast_nonsquare.c:                                              const uint16_t padding_x,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_fast_nonsquare.c:                                              const uint16_t padding_y,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_fast_nonsquare.c:                                              const uint16_t stride_x,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_fast_nonsquare.c:                                              const uint16_t stride_y,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_fast_nonsquare.c:                                              const uint16_t bias_shift,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_fast_nonsquare.c:                                              const uint16_t out_shift,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_fast_nonsquare.c:                                              const uint16_t dim_im_out_x,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_fast_nonsquare.c:                                              const uint16_t dim_im_out_y, 
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_fast_nonsquare.c:    int16_t   i_out_y, i_out_x, i_ker_y, i_ker_x;
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_fast_nonsquare.c:            uint16_t  colCnt = ch_im_in * dim_kernel_x * dim_kernel_y >> 2;
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7_nonsquare.c:                                                         const uint16_t dim_im_in_x,
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7_nonsquare.c:                                                         const uint16_t dim_im_in_y,
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7_nonsquare.c:                                                         const uint16_t ch_im_in,
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7_nonsquare.c:                                                         const uint16_t ch_im_out,
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7_nonsquare.c:                                                         const uint16_t dim_kernel_x,
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7_nonsquare.c:                                                         const uint16_t dim_kernel_y,
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7_nonsquare.c:                                                         const uint16_t padding_x,
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7_nonsquare.c:                                                         const uint16_t padding_y,
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7_nonsquare.c:                                                         const uint16_t stride_x,
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7_nonsquare.c:                                                         const uint16_t stride_y,
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7_nonsquare.c:                                                         const uint16_t bias_shift,
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7_nonsquare.c:                                                         const uint16_t out_shift,
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7_nonsquare.c:                                                         const uint16_t dim_im_out_x,
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7_nonsquare.c:                                                         const uint16_t dim_im_out_y, 
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7_nonsquare.c:    int16_t   i_out_y, i_out_x;
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7_nonsquare.c:    int16_t   i_ker_y, i_ker_x;
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7_nonsquare.c:    uint16_t  rowCnt;
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7_nonsquare.c:    uint16_t  row_shift;
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7_nonsquare.c:                uint16_t  colCnt = (dim_kernel_x * dim_kernel_y) >> 1;
NN/Source/ConvolutionFunctions/arm_depthwise_separable_conv_HWC_q7_nonsquare.c:                uint16_t  colCnt = (dim_kernel_x * dim_kernel_y);
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_basic.c:                          const uint16_t dim_im_in,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_basic.c:                          const uint16_t ch_im_in,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_basic.c:                          const uint16_t ch_im_out,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_basic.c:                          const uint16_t dim_kernel,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_basic.c:                          const uint16_t padding,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_basic.c:                          const uint16_t stride,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_basic.c:                          const uint16_t bias_shift,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_basic.c:                          const uint16_t out_shift,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_basic.c:                          const uint16_t dim_im_out, 
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_basic.c:    int16_t   i_out_y, i_out_x, i_ker_y, i_ker_x;
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_basic.c:            uint16_t  colCnt = ch_im_in * dim_kernel * dim_kernel >> 2;
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_basic.c:    uint16_t  i, j, k, l, m, n;
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_fast.c:                         const uint16_t dim_im_in,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_fast.c:                         const uint16_t ch_im_in,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_fast.c:                         const uint16_t ch_im_out,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_fast.c:                         const uint16_t dim_kernel,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_fast.c:                         const uint16_t padding,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_fast.c:                         const uint16_t stride,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_fast.c:                         const uint16_t bias_shift,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_fast.c:                         const uint16_t out_shift,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_fast.c:                         const uint16_t dim_im_out, 
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_fast.c:    int16_t   i_out_y, i_out_x, i_ker_y, i_ker_x;
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_fast.c:            uint16_t  colCnt = ch_im_in * dim_kernel * dim_kernel >> 2;
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_fast.c:    uint16_t  i, j, k, l, m, n;
NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c:                                        const uint16_t ch_im_out,
NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c:                                        const uint16_t numCol_A,
NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c:                                        const uint16_t bias_shift,
NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c:                                        const uint16_t out_shift, 
NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c:    uint16_t  rowCnt = ch_im_out >> 1;
NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c:        uint16_t  colCnt = numCol_A >> 2;
NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15.c:        uint16_t  colCnt = numCol_A >> 2;
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_basic.c:                           const uint16_t dim_im_in,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_basic.c:                           const uint16_t ch_im_in,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_basic.c:                           const uint16_t ch_im_out,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_basic.c:                           const uint16_t dim_kernel,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_basic.c:                           const uint16_t padding,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_basic.c:                           const uint16_t stride,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_basic.c:                           const uint16_t bias_shift,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_basic.c:                           const uint16_t out_shift,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_basic.c:                           const uint16_t dim_im_out, 
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_basic.c:    int16_t   i_out_y, i_out_x, i_ker_y, i_ker_x;
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_basic.c:    uint16_t  im2col_out_pixel_index = 0;
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_basic.c:                uint16_t  colCnt = ch_im_in * dim_kernel * dim_kernel >> 2;
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_basic.c:    uint16_t  i, j, k, l, m, n;
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_RGB.c:                        const uint16_t dim_im_in,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_RGB.c:                        const uint16_t ch_im_in,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_RGB.c:                        const uint16_t ch_im_out,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_RGB.c:                        const uint16_t dim_kernel,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_RGB.c:                        const uint16_t padding,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_RGB.c:                        const uint16_t stride,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_RGB.c:                        const uint16_t bias_shift,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_RGB.c:                        const uint16_t out_shift,
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_RGB.c:                        q7_t * Im_out, const uint16_t dim_im_out, q15_t * bufferA, q7_t * bufferB)
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_RGB.c:    int16_t   i_out_y, i_out_x, i_ker_y, i_ker_x;
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_RGB.c:            uint16_t  colCnt = 3 * dim_kernel * dim_kernel >> 2;
NN/Source/ConvolutionFunctions/arm_convolve_HWC_q7_RGB.c:    uint16_t  i, j, k, l, m, n;
NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15_reordered.c:                                                  const uint16_t ch_im_out,
NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15_reordered.c:                                                  const uint16_t numCol_A,
NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15_reordered.c:                                                  const uint16_t bias_shift,
NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15_reordered.c:                                                  const uint16_t out_shift, 
NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_q7_q15_reordered.c:        uint16_t  colCnt = numCol_A >> 2;
NN/Source/SoftmaxFunctions/arm_softmax_q7.c:void arm_softmax_q7(const q7_t * vec_in, const uint16_t dim_vec, q7_t * p_out)
NN/Source/SoftmaxFunctions/arm_softmax_q7.c:    int16_t   i;
NN/Source/SoftmaxFunctions/arm_softmax_q15.c:void arm_softmax_q15(const q15_t * vec_in, const uint16_t dim_vec, q15_t * p_out)
NN/Source/SoftmaxFunctions/arm_softmax_q15.c:    int16_t   i;
NN/Examples/ARM/arm_nn_examples/gru/arm_nnexamples_gru.cpp:void gru_example(q15_t * scratch_input, uint16_t input_size, uint16_t history_size,
Pack/Example/CMSIS_Driver/USART_LPC18xx.c:  uint16_t latch_div_best, oversampling, oversampling_best;
Pack/Example/CMSIS_Driver/USBD0_LPC18xx.c:  uint16_t  num_transferring;
Pack/Example/CMSIS_Driver/USBD0_LPC18xx.c:static int32_t USBD_EndpointConfigure (uint8_t ep_addr, uint8_t ep_type, uint16_t ep_max_packet_size);
Pack/Example/CMSIS_Driver/USBD0_LPC18xx.c:                                               uint16_t ep_max_packet_size)
Pack/Example/CMSIS_Driver/USBD0_LPC18xx.c:                                       uint16_t ep_max_packet_size) {
Pack/Example/CMSIS_Driver/USBD0_LPC18xx.c:  \fn          uint16_t USBD_GetFrameNumber (void)
Pack/Example/CMSIS_Driver/USBD0_LPC18xx.c:static uint16_t USBD_GetFrameNumber (void) {
Pack/Example/CMSIS_Driver/USBD0_LPC18xx.c:  uint16_t ep_mps, num_transferred;
Pack/Example/CMSIS_Driver/SSP_LPC18xx.c:      ssp->xfer->def_val = (uint16_t)(arg & 0xFFFF);
Pack/Example/CMSIS_Driver/SSP_LPC18xx.c:  uint16_t data;
Pack/Example/CMSIS_Driver/USBD1_LPC18xx.c:  uint16_t  num_transferring;
Pack/Example/CMSIS_Driver/USBD1_LPC18xx.c:static int32_t USBD_EndpointConfigure (uint8_t ep_addr, uint8_t ep_type, uint16_t ep_max_packet_size);
Pack/Example/CMSIS_Driver/USBD1_LPC18xx.c:                                               uint16_t ep_max_packet_size)
Pack/Example/CMSIS_Driver/USBD1_LPC18xx.c:                                       uint16_t ep_max_packet_size) {
Pack/Example/CMSIS_Driver/USBD1_LPC18xx.c:  \fn          uint16_t USBD_GetFrameNumber (void)
Pack/Example/CMSIS_Driver/USBD1_LPC18xx.c:static uint16_t USBD_GetFrameNumber (void) {
Pack/Example/CMSIS_Driver/USBD1_LPC18xx.c:  uint16_t ep_mps, num_transferred;
Pack/Example/CMSIS_Driver/USART_LPC18xx.h:#define FRACT_DIV(add, mul)      { ((uint16_t)((1U << 12) + (((uint32_t)(add << 24) / (mul)) >> 12))), ((uint8_t) (((mul) << 4) | add)), }
Pack/Example/CMSIS_Driver/USART_LPC18xx.h:  uint16_t val;
Pack/Example/CMSIS_Driver/SSP_LPC18xx.h:  uint16_t              def_val;        // Default transfer value
Pack/Example/CMSIS_Driver/CAN_LPC18xx.c:    ptr_CAN->IF1_DA1   = (((uint16_t)(data[1])) << 8) | data[0];
Pack/Example/CMSIS_Driver/CAN_LPC18xx.c:    ptr_CAN->IF1_DA2   = (((uint16_t)(data[3])) << 8) | data[2];
Pack/Example/CMSIS_Driver/CAN_LPC18xx.c:      ptr_CAN->IF1_DB1 = (((uint16_t)(data[5])) << 8) | data[4];
Pack/Example/CMSIS_Driver/CAN_LPC18xx.c:      ptr_CAN->IF1_DB2 = (((uint16_t)(data[7])) << 8) | data[6];
Pack/Example/CMSIS_Driver/EMAC_LPC18xx.c:    ((__packed uint16_t *)dst)[0] = ((__packed uint16_t *)frame)[0];
Pack/Example/CMSIS_Driver/EMAC_LPC18xx.c:    ((__packed uint16_t *)frame)[0] = ((uint16_t *)src)[0];
Pack/Example/CMSIS_Driver/EMAC_LPC18xx.c:  \fn          int32_t PHY_Read (uint8_t phy_addr, uint8_t reg_addr, uint16_t *data)
Pack/Example/CMSIS_Driver/EMAC_LPC18xx.c:static int32_t PHY_Read (uint8_t phy_addr, uint8_t reg_addr, uint16_t *data) {
Pack/Example/CMSIS_Driver/EMAC_LPC18xx.c:  \fn          int32_t PHY_Write (uint8_t phy_addr, uint8_t reg_addr, uint16_t data)
Pack/Example/CMSIS_Driver/EMAC_LPC18xx.c:static int32_t PHY_Write (uint8_t phy_addr, uint8_t reg_addr, uint16_t data) {
Pack/Example/Boards/Keil/MCB1800/RTX_Blinky/RTE/Device/LPC1857/system_LPC18xx.c:const uint16_t emcdivby2_opc[] =  {
Pack/Example/Boards/Keil/MCB1800/Blinky/RTE/Device/LPC1857/system_LPC18xx.c:const uint16_t emcdivby2_opc[] =  {
Pack/Example/Boards/Keil/MCB1800/Blinky_ULp/IRQ.c:extern uint16_t AD_last;                /* Last converted value               */
Pack/Example/Boards/Keil/MCB1800/Blinky_ULp/RTE/Device/LPC1857/system_LPC18xx.c:const uint16_t emcdivby2_opc[] =  {
Pack/Example/Boards/Keil/MCB1800/Blinky_ULp/Blinky.c:uint16_t AD_last;                       /* Last converted value               */
Pack/Example/Boards/Keil/MCB1800/Blinky_ULp/Blinky.c:  uint16_t AD_value = 0;
Pack/Example/Boards/Keil/MCB1800/Blinky_ULp/Blinky.c:  uint16_t AD_print = 0;
Pack/Example/Boards/Keil/MCB1800/Common/EEPROM_24LC128.c:static int32_t EEPROM_WriteBuf (uint16_t addr, const uint8_t *buf, uint32_t len) {
Pack/Example/Boards/Keil/MCB1800/Common/EEPROM_24LC128.c:static int32_t EEPROM_ReadBuf (uint16_t addr, uint8_t *buf, uint32_t len) {
Pack/Example/Boards/Keil/MCB1800/Common/EEPROM_24LC128.c:    return (EEPROM_ReadBuf ((uint16_t)addr, buf, len));
Pack/Example/Boards/Keil/MCB1800/Common/EEPROM_24LC128.c:      if (EEPROM_WriteBuf ((uint16_t)addr, buf, len_cur) == -1) return -1;
Pack/Example/Boards/Keil/MCB1800/Common/GLCD_MCB1800.c:static uint16_t   frame_buf[GLCD_WIDTH*GLCD_HEIGHT]__attribute__((at(SDRAM_BASE_ADDR)));
Pack/Example/Boards/Keil/MCB1800/Common/GLCD_MCB1800.c:static uint16_t   foreground_color = GLCD_COLOR_BLACK;
Pack/Example/Boards/Keil/MCB1800/Common/GLCD_MCB1800.c:static uint16_t   background_color = GLCD_COLOR_WHITE;
Pack/Example/Boards/Keil/MCB1800/Common/GLCD_MCB1800.c:  uint16_t *ptr_frame_buf;
Pack/Example/Boards/Keil/MCB1800/Common/GLCD_MCB1800.c:  uint16_t *ptr_bmp;
Pack/Example/Boards/Keil/MCB1800/Common/GLCD_MCB1800.c:  ptr_bmp = (uint16_t *)bitmap + (width * (height - 1));
Pack/Example/Boards/Keil/MCB1800/Common/ADC_MCB1800.c:static volatile uint16_t AD_last;       /* Last converted value               */
Pack/Example/Boards/Keil/MCB1800/Common/Audio_UDA1380.c:  \fn          void (uint8_t reg, uint16_t reg_val)
Pack/Example/Boards/Keil/MCB1800/Common/Audio_UDA1380.c:  \fn          int32_t UDA1380_RegRead (uint8_t reg, uint16_t * reg_val)
Pack/Example/Boards/Keil/MCB1800/Common/Audio_UDA1380.c:static int32_t UDA1380_RegRead (uint8_t reg, uint16_t *reg_val) {
Pack/Example/Boards/Keil/MCB1800/Common/Audio_UDA1380.c:  \fn          int32_t UDA1380_RegWrite (uint8_t reg, uint16_t reg_val)
Pack/Example/Boards/Keil/MCB1800/Common/Audio_UDA1380.c:static int32_t UDA1380_RegWrite (uint8_t reg, uint16_t reg_val) {
Pack/Example/Boards/Keil/MCB1800/Common/Audio_UDA1380.c:  uint16_t  rd_val;
Pack/Example/Boards/Keil/MCB1800/Common/Audio_UDA1380.c:  uint16_t reg_val, val;
Pack/Example/Boards/Keil/MCB1800/Common/Audio_UDA1380.c:  uint16_t reg_val;
Pack/Example/Boards/Keil/MCB1800/Common/Audio_UDA1380.c:  uint16_t reg_val;
Pack/Example/Boards/Keil/MCB1800/Common/Audio_UDA1380.c:  uint16_t  reg_val;
Pack/Example/Boards/Keil/MCB1800/Common/Audio_UDA1380.c:  uint16_t  pll;
RTOS/RTX/INC/cmsis_os.h:extern uint16_t const os_tickus_i;
RTOS/RTX/INC/cmsis_os.h:extern uint16_t const os_tickus_f;
RTOS/RTX/INC/RTX_CM_lib.h:extern OS_RESULT rt_mut_wait    (OS_ID mutex, uint16_t timeout);
RTOS/RTX/INC/RTX_CM_lib.h:OS_RESULT _os_mut_wait    (uint32_t p, OS_ID mutex, uint16_t timeout) __svc_indirect(0);
RTOS/RTX/INC/RTX_CM_lib.h:static __inline OS_RESULT os_mut_wait (OS_ID mutex, uint16_t timeout) {
RTOS/RTX/INC/RTX_CM_lib.h:extern uint16_t const os_maxtaskrun;
RTOS/RTX/INC/RTX_CM_lib.h:uint16_t const os_maxtaskrun = OS_TASK_CNT;
RTOS/RTX/INC/RTX_CM_lib.h:uint16_t const os_tickus_i   = OS_CLOCK/1000000;
RTOS/RTX/INC/RTX_CM_lib.h:uint16_t const os_tickus_f   = (((uint64_t)(OS_CLOCK-1000000*(OS_CLOCK/1000000)))<<16)/1000000;
RTOS/RTX/INC/RTX_CM_lib.h:uint16_t const mp_tcb_size;
RTOS/RTX/INC/RTX_CM_lib.h:uint16_t const mp_tcb_size = sizeof(mp_tcb);
RTOS/RTX/INC/RTX_CM_lib.h:uint16_t const mp_tmr_size;
RTOS/RTX/INC/RTX_CM_lib.h:uint16_t const mp_tmr_size = 0U;
RTOS/RTX/SRC/rt_CMSIS.c:static uint16_t rt_ms2tick (uint32_t millisec) {
RTOS/RTX/SRC/rt_CMSIS.c:  return (uint16_t)tick;
RTOS/RTX/SRC/rt_CMSIS.c:  uint16_t         reserved;                    // Reserved
RTOS/RTX/SRC/rt_CMSIS.c:  rt_evt_set((uint16_t)signals, ptcb->task_id); // Set event flags
RTOS/RTX/SRC/rt_CMSIS.c:  rt_evt_clr((uint16_t)signals, ptcb->task_id); // Clear event flags
RTOS/RTX/SRC/rt_CMSIS.c:    res = rt_evt_wait((uint16_t)signals, rt_ms2tick(millisec), __TRUE);
RTOS/RTX/SRC/rt_CMSIS.c:  isr_evt_set((uint16_t)signals, ptcb->task_id);// Set event flags
RTOS/RTX/SRC/rt_CMSIS.c:  rt_sem_init(sem, (uint16_t)count);            // Initialize Semaphore
RTOS/RTX/SRC/rt_CMSIS.c:  rt_mbx_init(queue_def->pool, (uint16_t)(4U*(queue_def->queue_sz + 4U)));
RTOS/RTX/SRC/rt_CMSIS.c:  rt_mbx_init(pmcb, (uint16_t)(4U*(queue_def->queue_sz + 4U)));
Binary file RTOS/RTX/LIB/ARM/RTX_CM0_B.lib matches
Binary file RTOS/RTX/LIB/ARM/RTX_CM3.lib matches
Binary file RTOS/RTX/LIB/ARM/RTX_CM4_B.lib matches
Binary file RTOS/RTX/LIB/ARM/RTX_CM4_IFX.lib matches
Binary file RTOS/RTX/LIB/ARM/RTX_CM3_B.lib matches
Binary file RTOS/RTX/LIB/ARM/RTX_CM4.lib matches
Binary file RTOS/RTX/LIB/ARM/RTX_CM3_IFX.lib matches
Binary file RTOS/RTX/LIB/ARM/RTX_CM0.lib matches
Binary file RTOS/RTX/LIB/GCC/libRTX_CM0_B.a matches
Binary file RTOS/RTX/LIB/GCC/libRTX_CM4.a matches
Binary file RTOS/RTX/LIB/GCC/libRTX_CM0.a matches
Binary file RTOS/RTX/LIB/GCC/libRTX_CM4_B.a matches
Binary file RTOS/RTX/LIB/GCC/libRTX_CM3_IFX.a matches
Binary file RTOS/RTX/LIB/GCC/libRTX_CM4_IFX.a matches
Binary file RTOS/RTX/LIB/GCC/libRTX_CM3.a matches
Binary file RTOS/RTX/LIB/GCC/libRTX_CM3_B.a matches
Binary file RTOS/RTX/LIB/IAR/RTX_CM0.a matches
Binary file RTOS/RTX/LIB/IAR/RTX_CM3_B.a matches
Binary file RTOS/RTX/LIB/IAR/RTX_CM4_B.a matches
Binary file RTOS/RTX/LIB/IAR/RTX_CM4.a matches
Binary file RTOS/RTX/LIB/IAR/RTX_CM0_B.a matches
Binary file RTOS/RTX/LIB/IAR/RTX_CM3.a matches
RTOS2/RTX/Include/rtx_os.h:  uint16_t                     tokens;  ///< Current number of tokens
RTOS2/RTX/Include/rtx_os.h:  uint16_t                 max_tokens;  ///< Maximum number of tokens
RTOS2/RTX/Include/rtx_os.h:    uint16_t                      max;  ///< Maximum Items
RTOS2/RTX/Include/rtx_os.h:    uint16_t                      cnt;  ///< Item Count
RTOS2/RTX/Include/rtx_os.h:    uint16_t                       in;  ///< Incoming Item Index
RTOS2/RTX/Include/rtx_os.h:    uint16_t                      out;  ///< Outgoing Item Index
RTOS2/RTX/Include/rtx_os.h:    uint16_t                             max;   ///< Maximum Items
RTOS2/RTX/Include/rtx_os.h:    uint16_t                         padding;
RTOS2/RTX/RTX5.scvd:      <member name="tokens"      type="uint16_t"       offset="12" info="Current number of tokens"/>
RTOS2/RTX/RTX5.scvd:      <member name="max_tokens"  type="uint16_t"       offset="14" info="Maximum number of tokens"/>
RTOS2/RTX/RTX5.scvd:      <member name="isr_queue_max"              type="uint16_t"             offset="84"  info="Maximum items"/>
RTOS2/RTX/RTX5.scvd:      <member name="isr_queue_cnt"              type="uint16_t"             offset="86"  info="Item count"/>
RTOS2/RTX/RTX5.scvd:      <member name="isr_queue_in"               type="uint16_t"             offset="88"  info="Incoming item index"/>
RTOS2/RTX/RTX5.scvd:      <member name="isr_queue_out"              type="uint16_t"             offset="90"  info="Outgoing item index"/>
RTOS2/RTX/RTX5.scvd:      <member name="isr_queue_max"         type="uint16_t" offset="16" info="Maximum data"/>
RTOS2/RTX/RTX5.scvd:      <member name="isr_queue_padding"     type="uint16_t" offset="18" info="Padding bytes"/>
Binary file RTOS2/RTX/Library/ARM/RTX_CM4F.lib matches
Binary file RTOS2/RTX/Library/ARM/RTX_V8MB.lib matches
Binary file RTOS2/RTX/Library/ARM/RTX_CM3.lib matches
Binary file RTOS2/RTX/Library/ARM/RTX_V8MMN.lib matches
Binary file RTOS2/RTX/Library/ARM/RTX_V8MMF.lib matches
Binary file RTOS2/RTX/Library/ARM/RTX_V8MM.lib matches
Binary file RTOS2/RTX/Library/ARM/RTX_V8MBN.lib matches
Binary file RTOS2/RTX/Library/ARM/RTX_V8MMFN.lib matches
Binary file RTOS2/RTX/Library/ARM/RTX_CM0.lib matches
Binary file RTOS2/RTX/Library/GCC/libRTX_V8MBN.a matches
Binary file RTOS2/RTX/Library/GCC/libRTX_V8MM.a matches
Binary file RTOS2/RTX/Library/GCC/libRTX_V8MMFN.a matches
Binary file RTOS2/RTX/Library/GCC/libRTX_CM0.a matches
Binary file RTOS2/RTX/Library/GCC/libRTX_CM3.a matches
Binary file RTOS2/RTX/Library/GCC/libRTX_V8MMN.a matches
Binary file RTOS2/RTX/Library/GCC/libRTX_V8MMF.a matches
Binary file RTOS2/RTX/Library/GCC/libRTX_V8MB.a matches
Binary file RTOS2/RTX/Library/GCC/libRTX_CM4F.a matches
RTOS2/RTX/Source/rtx_system.c:  uint16_t max;
RTOS2/RTX/Source/rtx_system.c:  uint16_t     max;
RTOS2/RTX/Source/rtx_semaphore.c:    semaphore->tokens      = (uint16_t)initial_count;
RTOS2/RTX/Source/rtx_semaphore.c:    semaphore->max_tokens  = (uint16_t)max_count;
RTOS2/RTX/Source/rtx_core_cm.h:static __asm    uint16_t atomic_inc16_lt (uint16_t *mem, uint16_t max) {
RTOS2/RTX/Source/rtx_core_cm.h:__STATIC_INLINE uint16_t atomic_inc16_lt (uint16_t *mem, uint16_t max) {
RTOS2/RTX/Source/rtx_core_cm.h:  register uint16_t ret;
RTOS2/RTX/Source/rtx_core_cm.h:static __asm    uint16_t atomic_inc16_lim (uint16_t *mem, uint16_t lim) {
RTOS2/RTX/Source/rtx_core_cm.h:__STATIC_INLINE uint16_t atomic_inc16_lim (uint16_t *mem, uint16_t lim) {
RTOS2/RTX/Source/rtx_core_cm.h:  register uint16_t ret;
RTOS2/RTX/Source/rtx_core_cm.h:static __asm    uint16_t atomic_dec16_nz (uint16_t *mem) {
RTOS2/RTX/Source/rtx_core_cm.h:__STATIC_INLINE uint16_t atomic_dec16_nz (uint16_t *mem) {
RTOS2/RTX/Source/rtx_core_cm.h:  register uint16_t ret;
RTOS2/RTX/Source/rtx_lib.c:  { &os_isr_queue[0], (uint16_t)(sizeof(os_isr_queue)/sizeof(void *)), 0U },
RTOS2/RTX/Source/rtx_core_ca.h:static __asm    uint16_t atomic_inc16_lt (uint16_t *mem, uint16_t max) {
RTOS2/RTX/Source/rtx_core_ca.h:__STATIC_INLINE uint16_t atomic_inc16_lt (uint16_t *mem, uint16_t max) {
RTOS2/RTX/Source/rtx_core_ca.h:  register uint16_t ret;
RTOS2/RTX/Source/rtx_core_ca.h:static __asm    uint16_t atomic_inc16_lim (uint16_t *mem, uint16_t lim) {
RTOS2/RTX/Source/rtx_core_ca.h:__STATIC_INLINE uint16_t atomic_inc16_lim (uint16_t *mem, uint16_t lim) {
RTOS2/RTX/Source/rtx_core_ca.h:  register uint16_t ret;
RTOS2/RTX/Source/rtx_core_ca.h:static __asm    uint16_t atomic_dec16_nz (uint16_t *mem) {
RTOS2/RTX/Source/rtx_core_ca.h:__STATIC_INLINE uint16_t atomic_dec16_nz (uint16_t *mem) {
RTOS2/RTX/Source/rtx_core_ca.h:  register uint16_t ret;
RTOS2/RTX/Examples/TrustZoneV8M/RTOS_Faults/CM33_s/IncidentLog_s.h:	uint16_t             Reserved;  // reserved (not used)
Utilities/CMSIS-SVD.xsd:      <xs:enumeration value="uint16_t"/>
Utilities/CMSIS-SVD.xsd:      <xs:enumeration value="int16_t"/>
Utilities/CMSIS-SVD.xsd:      <xs:enumeration value="uint16_t *"/>
Utilities/CMSIS-SVD.xsd:      <xs:enumeration value="int16_t *"/>
Binary file Utilities/Linux-gcc-4.4.4/SVDConv matches
Binary file Utilities/Linux-gcc-4.8.3/SVDConv matches
Utilities/ARM_Example.h:  __IO uint16_t  SR;                                /*!< Status Register                                                       */
Utilities/ARM_Example.h:  __I  uint16_t  RESERVED0[5];
Utilities/ARM_Example.h:  __IO uint16_t  INT;                               /*!< Interrupt Register                                                    */
Utilities/ARM_Example.h:  __I  uint16_t  RESERVED1[7];
Binary file Utilities/Win32/SVDConv.exe matches
